
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ab0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002bbc  08002bbc  00012bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002be0  08002be0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08002be0  08002be0  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002be0  08002be0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002be0  08002be0  00012be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002be4  08002be4  00012be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08002be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000008c  08002c74  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08002c74  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099f6  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be3  00000000  00000000  00029aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002b690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002c148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fc7  00000000  00000000  0002cae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c56a  00000000  00000000  00043aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082733  00000000  00000000  00050019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d274c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b8  00000000  00000000  000d27a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ba4 	.word	0x08002ba4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08002ba4 	.word	0x08002ba4

0800014c <isButtonPressed>:
int TimerForPressKey = 200;

int button_flag[number_button] = {0};

int isButtonPressed(int index)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1)
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
	{
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000a8 	.word	0x200000a8

08000180 <subProcess>:

void subProcess(int index)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200000a8 	.word	0x200000a8

080001a0 <getKeyInput>:

void getKeyInput()
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 1; i <= 3; i++)
 80001a6:	2301      	movs	r3, #1
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e077      	b.n	800029c <getKeyInput+0xfc>
	{
		KeyReg0[i] = KeyReg1[i];
 80001ac:	4a3f      	ldr	r2, [pc, #252]	; (80002ac <getKeyInput+0x10c>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	493e      	ldr	r1, [pc, #248]	; (80002b0 <getKeyInput+0x110>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001bc:	4a3d      	ldr	r2, [pc, #244]	; (80002b4 <getKeyInput+0x114>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4939      	ldr	r1, [pc, #228]	; (80002ac <getKeyInput+0x10c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if (i == 1)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b01      	cmp	r3, #1
 80001d0:	d108      	bne.n	80001e4 <getKeyInput+0x44>
			KeyReg2[1] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80001d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001d6:	4838      	ldr	r0, [pc, #224]	; (80002b8 <getKeyInput+0x118>)
 80001d8:	f001 fcb8 	bl	8001b4c <HAL_GPIO_ReadPin>
 80001dc:	4603      	mov	r3, r0
 80001de:	461a      	mov	r2, r3
 80001e0:	4b34      	ldr	r3, [pc, #208]	; (80002b4 <getKeyInput+0x114>)
 80001e2:	605a      	str	r2, [r3, #4]
		if (i == 2)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b02      	cmp	r3, #2
 80001e8:	d108      	bne.n	80001fc <getKeyInput+0x5c>
			KeyReg2[2] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80001ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001ee:	4832      	ldr	r0, [pc, #200]	; (80002b8 <getKeyInput+0x118>)
 80001f0:	f001 fcac 	bl	8001b4c <HAL_GPIO_ReadPin>
 80001f4:	4603      	mov	r3, r0
 80001f6:	461a      	mov	r2, r3
 80001f8:	4b2e      	ldr	r3, [pc, #184]	; (80002b4 <getKeyInput+0x114>)
 80001fa:	609a      	str	r2, [r3, #8]
		if (i == 3)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	2b03      	cmp	r3, #3
 8000200:	d108      	bne.n	8000214 <getKeyInput+0x74>
			KeyReg2[3] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000202:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000206:	482c      	ldr	r0, [pc, #176]	; (80002b8 <getKeyInput+0x118>)
 8000208:	f001 fca0 	bl	8001b4c <HAL_GPIO_ReadPin>
 800020c:	4603      	mov	r3, r0
 800020e:	461a      	mov	r2, r3
 8000210:	4b28      	ldr	r3, [pc, #160]	; (80002b4 <getKeyInput+0x114>)
 8000212:	60da      	str	r2, [r3, #12]


		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i]))
 8000214:	4a26      	ldr	r2, [pc, #152]	; (80002b0 <getKeyInput+0x110>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021c:	4923      	ldr	r1, [pc, #140]	; (80002ac <getKeyInput+0x10c>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000224:	429a      	cmp	r2, r3
 8000226:	d136      	bne.n	8000296 <getKeyInput+0xf6>
 8000228:	4a20      	ldr	r2, [pc, #128]	; (80002ac <getKeyInput+0x10c>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000230:	4920      	ldr	r1, [pc, #128]	; (80002b4 <getKeyInput+0x114>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000238:	429a      	cmp	r2, r3
 800023a:	d12c      	bne.n	8000296 <getKeyInput+0xf6>
		{
			if (KeyReg3[i] != KeyReg2[i])
 800023c:	4a1f      	ldr	r2, [pc, #124]	; (80002bc <getKeyInput+0x11c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000244:	491b      	ldr	r1, [pc, #108]	; (80002b4 <getKeyInput+0x114>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800024c:	429a      	cmp	r2, r3
 800024e:	d014      	beq.n	800027a <getKeyInput+0xda>
			{
				KeyReg3[i] = KeyReg2[i];
 8000250:	4a18      	ldr	r2, [pc, #96]	; (80002b4 <getKeyInput+0x114>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000258:	4918      	ldr	r1, [pc, #96]	; (80002bc <getKeyInput+0x11c>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE)
 8000260:	4a14      	ldr	r2, [pc, #80]	; (80002b4 <getKeyInput+0x114>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d114      	bne.n	8000296 <getKeyInput+0xf6>
				{
					//TODO
					subProcess(i);
 800026c:	6878      	ldr	r0, [r7, #4]
 800026e:	f7ff ff87 	bl	8000180 <subProcess>
					TimerForPressKey = 200;
 8000272:	4b13      	ldr	r3, [pc, #76]	; (80002c0 <getKeyInput+0x120>)
 8000274:	22c8      	movs	r2, #200	; 0xc8
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	e00d      	b.n	8000296 <getKeyInput+0xf6>
				}
			}
			else
			{
				TimerForPressKey--;
 800027a:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <getKeyInput+0x120>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	3b01      	subs	r3, #1
 8000280:	4a0f      	ldr	r2, [pc, #60]	; (80002c0 <getKeyInput+0x120>)
 8000282:	6013      	str	r3, [r2, #0]
				if (TimerForPressKey == 0)
 8000284:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <getKeyInput+0x120>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d104      	bne.n	8000296 <getKeyInput+0xf6>
	//				{
	//					//TODO
	//					subProcess();
	//				}
	//				TimerForPressKey = 200;
					KeyReg3[i] = NORMAL_STATE;
 800028c:	4a0b      	ldr	r2, [pc, #44]	; (80002bc <getKeyInput+0x11c>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2101      	movs	r1, #1
 8000292:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 1; i <= 3; i++)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	3301      	adds	r3, #1
 800029a:	607b      	str	r3, [r7, #4]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b03      	cmp	r3, #3
 80002a0:	dd84      	ble.n	80001ac <getKeyInput+0xc>
				}

			}
		}
	}
}
 80002a2:	bf00      	nop
 80002a4:	bf00      	nop
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000010 	.word	0x20000010
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000020 	.word	0x20000020
 80002b8:	40010800 	.word	0x40010800
 80002bc:	20000030 	.word	0x20000030
 80002c0:	20000040 	.word	0x20000040

080002c4 <fsm_automatic_run>:
 */

#include "fsm_automatic.h"

void fsm_automatic_run()
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	switch (status_horizontal_traffic)
 80002c8:	4b9f      	ldr	r3, [pc, #636]	; (8000548 <fsm_automatic_run+0x284>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	3b01      	subs	r3, #1
 80002ce:	2b03      	cmp	r3, #3
 80002d0:	f200 8122 	bhi.w	8000518 <fsm_automatic_run+0x254>
 80002d4:	a201      	add	r2, pc, #4	; (adr r2, 80002dc <fsm_automatic_run+0x18>)
 80002d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002da:	bf00      	nop
 80002dc:	080002ed 	.word	0x080002ed
 80002e0:	08000331 	.word	0x08000331
 80002e4:	080003d5 	.word	0x080003d5
 80002e8:	08000477 	.word	0x08000477
	{
	case INIT:
		status_horizontal_traffic = AUTO_RED; // Thoi gian chuyen trang thai led giao thong
 80002ec:	4b96      	ldr	r3, [pc, #600]	; (8000548 <fsm_automatic_run+0x284>)
 80002ee:	2202      	movs	r2, #2
 80002f0:	601a      	str	r2, [r3, #0]
		counter_horizontal = red_duration - 1;
 80002f2:	4b96      	ldr	r3, [pc, #600]	; (800054c <fsm_automatic_run+0x288>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	3b01      	subs	r3, #1
 80002f8:	4a95      	ldr	r2, [pc, #596]	; (8000550 <fsm_automatic_run+0x28c>)
 80002fa:	6013      	str	r3, [r2, #0]
		update_buffer_horizontal();
 80002fc:	f000 fdb2 	bl	8000e64 <update_buffer_horizontal>
		index_buffer_horizontal = 0;
 8000300:	4b94      	ldr	r3, [pc, #592]	; (8000554 <fsm_automatic_run+0x290>)
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
		setTimer(1, time_scan_7seg);				  // Quet led
 8000306:	4b94      	ldr	r3, [pc, #592]	; (8000558 <fsm_automatic_run+0x294>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4619      	mov	r1, r3
 800030c:	2001      	movs	r0, #1
 800030e:	f000 ff21 	bl	8001154 <setTimer>
		setTimer(0, red_duration * 1000); // thoi gian red on
 8000312:	4b8e      	ldr	r3, [pc, #568]	; (800054c <fsm_automatic_run+0x288>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800031a:	fb02 f303 	mul.w	r3, r2, r3
 800031e:	4619      	mov	r1, r3
 8000320:	2000      	movs	r0, #0
 8000322:	f000 ff17 	bl	8001154 <setTimer>
		setTimer(2, 1300);				  // giam counter led 7 doan
 8000326:	f240 5114 	movw	r1, #1300	; 0x514
 800032a:	2002      	movs	r0, #2
 800032c:	f000 ff12 	bl	8001154 <setTimer>
		
	case AUTO_RED:
		if (timer_flag[1] == 1)
 8000330:	4b8a      	ldr	r3, [pc, #552]	; (800055c <fsm_automatic_run+0x298>)
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d118      	bne.n	800036a <fsm_automatic_run+0xa6>
		{
			red_on_horizontal();
 8000338:	f001 f850 	bl	80013dc <red_on_horizontal>
			update_7seg_horizontal(index_buffer_horizontal);
 800033c:	4b85      	ldr	r3, [pc, #532]	; (8000554 <fsm_automatic_run+0x290>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4618      	mov	r0, r3
 8000342:	f000 fd47 	bl	8000dd4 <update_7seg_horizontal>
			index_buffer_horizontal++;
 8000346:	4b83      	ldr	r3, [pc, #524]	; (8000554 <fsm_automatic_run+0x290>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3301      	adds	r3, #1
 800034c:	4a81      	ldr	r2, [pc, #516]	; (8000554 <fsm_automatic_run+0x290>)
 800034e:	6013      	str	r3, [r2, #0]
			if (index_buffer_horizontal >= 2)
 8000350:	4b80      	ldr	r3, [pc, #512]	; (8000554 <fsm_automatic_run+0x290>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b01      	cmp	r3, #1
 8000356:	dd02      	ble.n	800035e <fsm_automatic_run+0x9a>
				index_buffer_horizontal = 0;
 8000358:	4b7e      	ldr	r3, [pc, #504]	; (8000554 <fsm_automatic_run+0x290>)
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
			setTimer(1, time_scan_7seg);
 800035e:	4b7e      	ldr	r3, [pc, #504]	; (8000558 <fsm_automatic_run+0x294>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4619      	mov	r1, r3
 8000364:	2001      	movs	r0, #1
 8000366:	f000 fef5 	bl	8001154 <setTimer>
		}

		if (timer_flag[0] == 1)
 800036a:	4b7c      	ldr	r3, [pc, #496]	; (800055c <fsm_automatic_run+0x298>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2b01      	cmp	r3, #1
 8000370:	d112      	bne.n	8000398 <fsm_automatic_run+0xd4>
		{
			status_horizontal_traffic = AUTO_GREEN;
 8000372:	4b75      	ldr	r3, [pc, #468]	; (8000548 <fsm_automatic_run+0x284>)
 8000374:	2203      	movs	r2, #3
 8000376:	601a      	str	r2, [r3, #0]
			counter_horizontal = green_duration;
 8000378:	4b79      	ldr	r3, [pc, #484]	; (8000560 <fsm_automatic_run+0x29c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a74      	ldr	r2, [pc, #464]	; (8000550 <fsm_automatic_run+0x28c>)
 800037e:	6013      	str	r3, [r2, #0]
			update_buffer_horizontal();
 8000380:	f000 fd70 	bl	8000e64 <update_buffer_horizontal>
			setTimer(0, green_duration * 1000);
 8000384:	4b76      	ldr	r3, [pc, #472]	; (8000560 <fsm_automatic_run+0x29c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800038c:	fb02 f303 	mul.w	r3, r2, r3
 8000390:	4619      	mov	r1, r3
 8000392:	2000      	movs	r0, #0
 8000394:	f000 fede 	bl	8001154 <setTimer>
		}

		if (timer_flag[2] == 1)
 8000398:	4b70      	ldr	r3, [pc, #448]	; (800055c <fsm_automatic_run+0x298>)
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	2b01      	cmp	r3, #1
 800039e:	d10b      	bne.n	80003b8 <fsm_automatic_run+0xf4>
		{
			counter_horizontal--;
 80003a0:	4b6b      	ldr	r3, [pc, #428]	; (8000550 <fsm_automatic_run+0x28c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	3b01      	subs	r3, #1
 80003a6:	4a6a      	ldr	r2, [pc, #424]	; (8000550 <fsm_automatic_run+0x28c>)
 80003a8:	6013      	str	r3, [r2, #0]
			update_buffer_horizontal();
 80003aa:	f000 fd5b 	bl	8000e64 <update_buffer_horizontal>
			setTimer(2, 1000);
 80003ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003b2:	2002      	movs	r0, #2
 80003b4:	f000 fece 	bl	8001154 <setTimer>
		}

		if (isButtonPressed(1) == 1)
 80003b8:	2001      	movs	r0, #1
 80003ba:	f7ff fec7 	bl	800014c <isButtonPressed>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	f040 80ab 	bne.w	800051c <fsm_automatic_run+0x258>
		{
			status_horizontal_traffic = INIT_MODE;
 80003c6:	4b60      	ldr	r3, [pc, #384]	; (8000548 <fsm_automatic_run+0x284>)
 80003c8:	2214      	movs	r2, #20
 80003ca:	601a      	str	r2, [r3, #0]
			status_vertical_traffic = INIT_MODE;
 80003cc:	4b65      	ldr	r3, [pc, #404]	; (8000564 <fsm_automatic_run+0x2a0>)
 80003ce:	2214      	movs	r2, #20
 80003d0:	601a      	str	r2, [r3, #0]
		}

		break;
 80003d2:	e0a3      	b.n	800051c <fsm_automatic_run+0x258>
	case AUTO_GREEN:
		if (timer_flag[1] == 1)
 80003d4:	4b61      	ldr	r3, [pc, #388]	; (800055c <fsm_automatic_run+0x298>)
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d118      	bne.n	800040e <fsm_automatic_run+0x14a>
		{
			green_on_horizontal();
 80003dc:	f001 f814 	bl	8001408 <green_on_horizontal>
			update_7seg_horizontal(index_buffer_horizontal);
 80003e0:	4b5c      	ldr	r3, [pc, #368]	; (8000554 <fsm_automatic_run+0x290>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 fcf5 	bl	8000dd4 <update_7seg_horizontal>
			index_buffer_horizontal++;
 80003ea:	4b5a      	ldr	r3, [pc, #360]	; (8000554 <fsm_automatic_run+0x290>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	3301      	adds	r3, #1
 80003f0:	4a58      	ldr	r2, [pc, #352]	; (8000554 <fsm_automatic_run+0x290>)
 80003f2:	6013      	str	r3, [r2, #0]
			if (index_buffer_horizontal >= 2)
 80003f4:	4b57      	ldr	r3, [pc, #348]	; (8000554 <fsm_automatic_run+0x290>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	dd02      	ble.n	8000402 <fsm_automatic_run+0x13e>
				index_buffer_horizontal = 0;
 80003fc:	4b55      	ldr	r3, [pc, #340]	; (8000554 <fsm_automatic_run+0x290>)
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
			setTimer(1, time_scan_7seg);
 8000402:	4b55      	ldr	r3, [pc, #340]	; (8000558 <fsm_automatic_run+0x294>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4619      	mov	r1, r3
 8000408:	2001      	movs	r0, #1
 800040a:	f000 fea3 	bl	8001154 <setTimer>
		}

		if (timer_flag[0] == 1)
 800040e:	4b53      	ldr	r3, [pc, #332]	; (800055c <fsm_automatic_run+0x298>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d112      	bne.n	800043c <fsm_automatic_run+0x178>
		{
			status_horizontal_traffic = AUTO_YELLOW;
 8000416:	4b4c      	ldr	r3, [pc, #304]	; (8000548 <fsm_automatic_run+0x284>)
 8000418:	2204      	movs	r2, #4
 800041a:	601a      	str	r2, [r3, #0]
			counter_horizontal = yellow_duration;
 800041c:	4b52      	ldr	r3, [pc, #328]	; (8000568 <fsm_automatic_run+0x2a4>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a4b      	ldr	r2, [pc, #300]	; (8000550 <fsm_automatic_run+0x28c>)
 8000422:	6013      	str	r3, [r2, #0]
			update_buffer_horizontal();
 8000424:	f000 fd1e 	bl	8000e64 <update_buffer_horizontal>
			setTimer(0, yellow_duration * 1000);
 8000428:	4b4f      	ldr	r3, [pc, #316]	; (8000568 <fsm_automatic_run+0x2a4>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000430:	fb02 f303 	mul.w	r3, r2, r3
 8000434:	4619      	mov	r1, r3
 8000436:	2000      	movs	r0, #0
 8000438:	f000 fe8c 	bl	8001154 <setTimer>
		}

		if (timer_flag[2] == 1)
 800043c:	4b47      	ldr	r3, [pc, #284]	; (800055c <fsm_automatic_run+0x298>)
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	2b01      	cmp	r3, #1
 8000442:	d10b      	bne.n	800045c <fsm_automatic_run+0x198>
		{
			counter_horizontal--;
 8000444:	4b42      	ldr	r3, [pc, #264]	; (8000550 <fsm_automatic_run+0x28c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	3b01      	subs	r3, #1
 800044a:	4a41      	ldr	r2, [pc, #260]	; (8000550 <fsm_automatic_run+0x28c>)
 800044c:	6013      	str	r3, [r2, #0]
			update_buffer_horizontal();
 800044e:	f000 fd09 	bl	8000e64 <update_buffer_horizontal>
			setTimer(2, 1000);
 8000452:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000456:	2002      	movs	r0, #2
 8000458:	f000 fe7c 	bl	8001154 <setTimer>
		}

		if (isButtonPressed(1) == 1)
 800045c:	2001      	movs	r0, #1
 800045e:	f7ff fe75 	bl	800014c <isButtonPressed>
 8000462:	4603      	mov	r3, r0
 8000464:	2b01      	cmp	r3, #1
 8000466:	d15b      	bne.n	8000520 <fsm_automatic_run+0x25c>
		{
			status_horizontal_traffic = INIT_MODE;
 8000468:	4b37      	ldr	r3, [pc, #220]	; (8000548 <fsm_automatic_run+0x284>)
 800046a:	2214      	movs	r2, #20
 800046c:	601a      	str	r2, [r3, #0]
			status_vertical_traffic = INIT_MODE;
 800046e:	4b3d      	ldr	r3, [pc, #244]	; (8000564 <fsm_automatic_run+0x2a0>)
 8000470:	2214      	movs	r2, #20
 8000472:	601a      	str	r2, [r3, #0]
		}

		break;
 8000474:	e054      	b.n	8000520 <fsm_automatic_run+0x25c>
	case AUTO_YELLOW:
		if (timer_flag[1] == 1)
 8000476:	4b39      	ldr	r3, [pc, #228]	; (800055c <fsm_automatic_run+0x298>)
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	2b01      	cmp	r3, #1
 800047c:	d118      	bne.n	80004b0 <fsm_automatic_run+0x1ec>
		{
			yellow_on_horizontal();
 800047e:	f000 ffd9 	bl	8001434 <yellow_on_horizontal>
			update_7seg_horizontal(index_buffer_horizontal);
 8000482:	4b34      	ldr	r3, [pc, #208]	; (8000554 <fsm_automatic_run+0x290>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4618      	mov	r0, r3
 8000488:	f000 fca4 	bl	8000dd4 <update_7seg_horizontal>
			index_buffer_horizontal++;
 800048c:	4b31      	ldr	r3, [pc, #196]	; (8000554 <fsm_automatic_run+0x290>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	3301      	adds	r3, #1
 8000492:	4a30      	ldr	r2, [pc, #192]	; (8000554 <fsm_automatic_run+0x290>)
 8000494:	6013      	str	r3, [r2, #0]
			if (index_buffer_horizontal >= 2)
 8000496:	4b2f      	ldr	r3, [pc, #188]	; (8000554 <fsm_automatic_run+0x290>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	dd02      	ble.n	80004a4 <fsm_automatic_run+0x1e0>
				index_buffer_horizontal = 0;
 800049e:	4b2d      	ldr	r3, [pc, #180]	; (8000554 <fsm_automatic_run+0x290>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
			setTimer(1, time_scan_7seg);
 80004a4:	4b2c      	ldr	r3, [pc, #176]	; (8000558 <fsm_automatic_run+0x294>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4619      	mov	r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	f000 fe52 	bl	8001154 <setTimer>
		}

		if (timer_flag[0] == 1)
 80004b0:	4b2a      	ldr	r3, [pc, #168]	; (800055c <fsm_automatic_run+0x298>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d112      	bne.n	80004de <fsm_automatic_run+0x21a>
		{
			status_horizontal_traffic = AUTO_RED;
 80004b8:	4b23      	ldr	r3, [pc, #140]	; (8000548 <fsm_automatic_run+0x284>)
 80004ba:	2202      	movs	r2, #2
 80004bc:	601a      	str	r2, [r3, #0]
			counter_horizontal = red_duration;
 80004be:	4b23      	ldr	r3, [pc, #140]	; (800054c <fsm_automatic_run+0x288>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a23      	ldr	r2, [pc, #140]	; (8000550 <fsm_automatic_run+0x28c>)
 80004c4:	6013      	str	r3, [r2, #0]
			update_buffer_horizontal();
 80004c6:	f000 fccd 	bl	8000e64 <update_buffer_horizontal>
			setTimer(0, red_duration * 1000);
 80004ca:	4b20      	ldr	r3, [pc, #128]	; (800054c <fsm_automatic_run+0x288>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004d2:	fb02 f303 	mul.w	r3, r2, r3
 80004d6:	4619      	mov	r1, r3
 80004d8:	2000      	movs	r0, #0
 80004da:	f000 fe3b 	bl	8001154 <setTimer>
		}

		if (timer_flag[2] == 1)
 80004de:	4b1f      	ldr	r3, [pc, #124]	; (800055c <fsm_automatic_run+0x298>)
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d10b      	bne.n	80004fe <fsm_automatic_run+0x23a>
		{
			counter_horizontal--;
 80004e6:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <fsm_automatic_run+0x28c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	3b01      	subs	r3, #1
 80004ec:	4a18      	ldr	r2, [pc, #96]	; (8000550 <fsm_automatic_run+0x28c>)
 80004ee:	6013      	str	r3, [r2, #0]
			update_buffer_horizontal();
 80004f0:	f000 fcb8 	bl	8000e64 <update_buffer_horizontal>
			setTimer(2, 1000);
 80004f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004f8:	2002      	movs	r0, #2
 80004fa:	f000 fe2b 	bl	8001154 <setTimer>
		}

		if (isButtonPressed(1) == 1)
 80004fe:	2001      	movs	r0, #1
 8000500:	f7ff fe24 	bl	800014c <isButtonPressed>
 8000504:	4603      	mov	r3, r0
 8000506:	2b01      	cmp	r3, #1
 8000508:	d10c      	bne.n	8000524 <fsm_automatic_run+0x260>
		{
			status_horizontal_traffic = INIT_MODE;
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <fsm_automatic_run+0x284>)
 800050c:	2214      	movs	r2, #20
 800050e:	601a      	str	r2, [r3, #0]
			status_vertical_traffic = INIT_MODE;
 8000510:	4b14      	ldr	r3, [pc, #80]	; (8000564 <fsm_automatic_run+0x2a0>)
 8000512:	2214      	movs	r2, #20
 8000514:	601a      	str	r2, [r3, #0]
		}

		break;
 8000516:	e005      	b.n	8000524 <fsm_automatic_run+0x260>
	default:
		break;
 8000518:	bf00      	nop
 800051a:	e004      	b.n	8000526 <fsm_automatic_run+0x262>
		break;
 800051c:	bf00      	nop
 800051e:	e002      	b.n	8000526 <fsm_automatic_run+0x262>
		break;
 8000520:	bf00      	nop
 8000522:	e000      	b.n	8000526 <fsm_automatic_run+0x262>
		break;
 8000524:	bf00      	nop
	}

	switch (status_vertical_traffic)
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <fsm_automatic_run+0x2a0>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	3b01      	subs	r3, #1
 800052c:	2b03      	cmp	r3, #3
 800052e:	f200 812e 	bhi.w	800078e <fsm_automatic_run+0x4ca>
 8000532:	a201      	add	r2, pc, #4	; (adr r2, 8000538 <fsm_automatic_run+0x274>)
 8000534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000538:	0800056d 	.word	0x0800056d
 800053c:	080005b3 	.word	0x080005b3
 8000540:	08000653 	.word	0x08000653
 8000544:	080006f1 	.word	0x080006f1
 8000548:	20000044 	.word	0x20000044
 800054c:	2000004c 	.word	0x2000004c
 8000550:	20000068 	.word	0x20000068
 8000554:	200000c4 	.word	0x200000c4
 8000558:	20000070 	.word	0x20000070
 800055c:	200000cc 	.word	0x200000cc
 8000560:	20000050 	.word	0x20000050
 8000564:	20000048 	.word	0x20000048
 8000568:	20000054 	.word	0x20000054
	{
	case INIT:
		status_vertical_traffic = AUTO_GREEN;
 800056c:	4b8c      	ldr	r3, [pc, #560]	; (80007a0 <fsm_automatic_run+0x4dc>)
 800056e:	2203      	movs	r2, #3
 8000570:	601a      	str	r2, [r3, #0]
		counter_vertical = green_duration - 1;
 8000572:	4b8c      	ldr	r3, [pc, #560]	; (80007a4 <fsm_automatic_run+0x4e0>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	3b01      	subs	r3, #1
 8000578:	4a8b      	ldr	r2, [pc, #556]	; (80007a8 <fsm_automatic_run+0x4e4>)
 800057a:	6013      	str	r3, [r2, #0]
		update_buffer_vertical();
 800057c:	f000 fc98 	bl	8000eb0 <update_buffer_vertical>
		index_buffer_vertical = 0;
 8000580:	4b8a      	ldr	r3, [pc, #552]	; (80007ac <fsm_automatic_run+0x4e8>)
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
		setTimer(4, time_scan_7seg); // Quet led
 8000586:	4b8a      	ldr	r3, [pc, #552]	; (80007b0 <fsm_automatic_run+0x4ec>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4619      	mov	r1, r3
 800058c:	2004      	movs	r0, #4
 800058e:	f000 fde1 	bl	8001154 <setTimer>
		setTimer(3, green_duration * 1000);
 8000592:	4b84      	ldr	r3, [pc, #528]	; (80007a4 <fsm_automatic_run+0x4e0>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800059a:	fb02 f303 	mul.w	r3, r2, r3
 800059e:	4619      	mov	r1, r3
 80005a0:	2003      	movs	r0, #3
 80005a2:	f000 fdd7 	bl	8001154 <setTimer>
		setTimer(5, 1300); // giam counter led 7 doan
 80005a6:	f240 5114 	movw	r1, #1300	; 0x514
 80005aa:	2005      	movs	r0, #5
 80005ac:	f000 fdd2 	bl	8001154 <setTimer>
		break;
 80005b0:	e0f4      	b.n	800079c <fsm_automatic_run+0x4d8>
	case AUTO_RED:

		if (timer_flag[4] == 1)
 80005b2:	4b80      	ldr	r3, [pc, #512]	; (80007b4 <fsm_automatic_run+0x4f0>)
 80005b4:	691b      	ldr	r3, [r3, #16]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d116      	bne.n	80005e8 <fsm_automatic_run+0x324>
		{
			red_on_vertical();
 80005ba:	f000 fecd 	bl	8001358 <red_on_vertical>
			update_7seg_vertical(index_buffer_vertical++);
 80005be:	4b7b      	ldr	r3, [pc, #492]	; (80007ac <fsm_automatic_run+0x4e8>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	1c5a      	adds	r2, r3, #1
 80005c4:	4979      	ldr	r1, [pc, #484]	; (80007ac <fsm_automatic_run+0x4e8>)
 80005c6:	600a      	str	r2, [r1, #0]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fc27 	bl	8000e1c <update_7seg_vertical>
			if (index_buffer_vertical >= 2)
 80005ce:	4b77      	ldr	r3, [pc, #476]	; (80007ac <fsm_automatic_run+0x4e8>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	dd02      	ble.n	80005dc <fsm_automatic_run+0x318>
				index_buffer_vertical = 0;
 80005d6:	4b75      	ldr	r3, [pc, #468]	; (80007ac <fsm_automatic_run+0x4e8>)
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
			setTimer(4, time_scan_7seg);
 80005dc:	4b74      	ldr	r3, [pc, #464]	; (80007b0 <fsm_automatic_run+0x4ec>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4619      	mov	r1, r3
 80005e2:	2004      	movs	r0, #4
 80005e4:	f000 fdb6 	bl	8001154 <setTimer>
		}

		if (timer_flag[3] == 1)
 80005e8:	4b72      	ldr	r3, [pc, #456]	; (80007b4 <fsm_automatic_run+0x4f0>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d112      	bne.n	8000616 <fsm_automatic_run+0x352>
		{
			status_vertical_traffic = AUTO_GREEN;
 80005f0:	4b6b      	ldr	r3, [pc, #428]	; (80007a0 <fsm_automatic_run+0x4dc>)
 80005f2:	2203      	movs	r2, #3
 80005f4:	601a      	str	r2, [r3, #0]
			counter_vertical = green_duration;
 80005f6:	4b6b      	ldr	r3, [pc, #428]	; (80007a4 <fsm_automatic_run+0x4e0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a6b      	ldr	r2, [pc, #428]	; (80007a8 <fsm_automatic_run+0x4e4>)
 80005fc:	6013      	str	r3, [r2, #0]
			update_buffer_vertical();
 80005fe:	f000 fc57 	bl	8000eb0 <update_buffer_vertical>
			setTimer(3, green_duration * 1000);
 8000602:	4b68      	ldr	r3, [pc, #416]	; (80007a4 <fsm_automatic_run+0x4e0>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800060a:	fb02 f303 	mul.w	r3, r2, r3
 800060e:	4619      	mov	r1, r3
 8000610:	2003      	movs	r0, #3
 8000612:	f000 fd9f 	bl	8001154 <setTimer>
		}

		if (timer_flag[5] == 1)
 8000616:	4b67      	ldr	r3, [pc, #412]	; (80007b4 <fsm_automatic_run+0x4f0>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d10b      	bne.n	8000636 <fsm_automatic_run+0x372>
		{
			counter_vertical--;
 800061e:	4b62      	ldr	r3, [pc, #392]	; (80007a8 <fsm_automatic_run+0x4e4>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	3b01      	subs	r3, #1
 8000624:	4a60      	ldr	r2, [pc, #384]	; (80007a8 <fsm_automatic_run+0x4e4>)
 8000626:	6013      	str	r3, [r2, #0]
			update_buffer_vertical();
 8000628:	f000 fc42 	bl	8000eb0 <update_buffer_vertical>
			setTimer(5, 1000);
 800062c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000630:	2005      	movs	r0, #5
 8000632:	f000 fd8f 	bl	8001154 <setTimer>
		}

		if (isButtonPressed(1) == 1)
 8000636:	2001      	movs	r0, #1
 8000638:	f7ff fd88 	bl	800014c <isButtonPressed>
 800063c:	4603      	mov	r3, r0
 800063e:	2b01      	cmp	r3, #1
 8000640:	f040 80a7 	bne.w	8000792 <fsm_automatic_run+0x4ce>
		{
			status_vertical_traffic = INIT_MODE;
 8000644:	4b56      	ldr	r3, [pc, #344]	; (80007a0 <fsm_automatic_run+0x4dc>)
 8000646:	2214      	movs	r2, #20
 8000648:	601a      	str	r2, [r3, #0]
			status_horizontal_traffic = INIT_MODE;
 800064a:	4b5b      	ldr	r3, [pc, #364]	; (80007b8 <fsm_automatic_run+0x4f4>)
 800064c:	2214      	movs	r2, #20
 800064e:	601a      	str	r2, [r3, #0]
		}

		break;
 8000650:	e09f      	b.n	8000792 <fsm_automatic_run+0x4ce>
	case AUTO_GREEN:

		if (timer_flag[4] == 1)
 8000652:	4b58      	ldr	r3, [pc, #352]	; (80007b4 <fsm_automatic_run+0x4f0>)
 8000654:	691b      	ldr	r3, [r3, #16]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d116      	bne.n	8000688 <fsm_automatic_run+0x3c4>
		{
			green_on_vertical();
 800065a:	f000 fe93 	bl	8001384 <green_on_vertical>
			update_7seg_vertical(index_buffer_vertical++);
 800065e:	4b53      	ldr	r3, [pc, #332]	; (80007ac <fsm_automatic_run+0x4e8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	4951      	ldr	r1, [pc, #324]	; (80007ac <fsm_automatic_run+0x4e8>)
 8000666:	600a      	str	r2, [r1, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fbd7 	bl	8000e1c <update_7seg_vertical>
			if (index_buffer_vertical >= 2)
 800066e:	4b4f      	ldr	r3, [pc, #316]	; (80007ac <fsm_automatic_run+0x4e8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	dd02      	ble.n	800067c <fsm_automatic_run+0x3b8>
				index_buffer_vertical = 0;
 8000676:	4b4d      	ldr	r3, [pc, #308]	; (80007ac <fsm_automatic_run+0x4e8>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
			setTimer(4, time_scan_7seg);
 800067c:	4b4c      	ldr	r3, [pc, #304]	; (80007b0 <fsm_automatic_run+0x4ec>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4619      	mov	r1, r3
 8000682:	2004      	movs	r0, #4
 8000684:	f000 fd66 	bl	8001154 <setTimer>
		}

		if (timer_flag[3] == 1)
 8000688:	4b4a      	ldr	r3, [pc, #296]	; (80007b4 <fsm_automatic_run+0x4f0>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d112      	bne.n	80006b6 <fsm_automatic_run+0x3f2>
		{
			status_vertical_traffic = AUTO_YELLOW;
 8000690:	4b43      	ldr	r3, [pc, #268]	; (80007a0 <fsm_automatic_run+0x4dc>)
 8000692:	2204      	movs	r2, #4
 8000694:	601a      	str	r2, [r3, #0]
			counter_vertical = yellow_duration;
 8000696:	4b49      	ldr	r3, [pc, #292]	; (80007bc <fsm_automatic_run+0x4f8>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a43      	ldr	r2, [pc, #268]	; (80007a8 <fsm_automatic_run+0x4e4>)
 800069c:	6013      	str	r3, [r2, #0]
			update_buffer_vertical();
 800069e:	f000 fc07 	bl	8000eb0 <update_buffer_vertical>
			setTimer(3, yellow_duration * 1000);
 80006a2:	4b46      	ldr	r3, [pc, #280]	; (80007bc <fsm_automatic_run+0x4f8>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006aa:	fb02 f303 	mul.w	r3, r2, r3
 80006ae:	4619      	mov	r1, r3
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 fd4f 	bl	8001154 <setTimer>
		}

		if (timer_flag[5] == 1)
 80006b6:	4b3f      	ldr	r3, [pc, #252]	; (80007b4 <fsm_automatic_run+0x4f0>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d10b      	bne.n	80006d6 <fsm_automatic_run+0x412>
		{
			counter_vertical--;
 80006be:	4b3a      	ldr	r3, [pc, #232]	; (80007a8 <fsm_automatic_run+0x4e4>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	3b01      	subs	r3, #1
 80006c4:	4a38      	ldr	r2, [pc, #224]	; (80007a8 <fsm_automatic_run+0x4e4>)
 80006c6:	6013      	str	r3, [r2, #0]
			update_buffer_vertical();
 80006c8:	f000 fbf2 	bl	8000eb0 <update_buffer_vertical>
			setTimer(5, 1000);
 80006cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006d0:	2005      	movs	r0, #5
 80006d2:	f000 fd3f 	bl	8001154 <setTimer>
		}

		if (isButtonPressed(1) == 1)
 80006d6:	2001      	movs	r0, #1
 80006d8:	f7ff fd38 	bl	800014c <isButtonPressed>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d159      	bne.n	8000796 <fsm_automatic_run+0x4d2>
		{
			status_vertical_traffic = INIT_MODE;
 80006e2:	4b2f      	ldr	r3, [pc, #188]	; (80007a0 <fsm_automatic_run+0x4dc>)
 80006e4:	2214      	movs	r2, #20
 80006e6:	601a      	str	r2, [r3, #0]
			status_horizontal_traffic = INIT_MODE;
 80006e8:	4b33      	ldr	r3, [pc, #204]	; (80007b8 <fsm_automatic_run+0x4f4>)
 80006ea:	2214      	movs	r2, #20
 80006ec:	601a      	str	r2, [r3, #0]
		}

		break;
 80006ee:	e052      	b.n	8000796 <fsm_automatic_run+0x4d2>
	case AUTO_YELLOW:
		if (timer_flag[4] == 1)
 80006f0:	4b30      	ldr	r3, [pc, #192]	; (80007b4 <fsm_automatic_run+0x4f0>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d116      	bne.n	8000726 <fsm_automatic_run+0x462>
		{
			yellow_on_vertical();
 80006f8:	f000 fe5a 	bl	80013b0 <yellow_on_vertical>
			update_7seg_vertical(index_buffer_vertical++);
 80006fc:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <fsm_automatic_run+0x4e8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	1c5a      	adds	r2, r3, #1
 8000702:	492a      	ldr	r1, [pc, #168]	; (80007ac <fsm_automatic_run+0x4e8>)
 8000704:	600a      	str	r2, [r1, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f000 fb88 	bl	8000e1c <update_7seg_vertical>
			if (index_buffer_vertical >= 2)
 800070c:	4b27      	ldr	r3, [pc, #156]	; (80007ac <fsm_automatic_run+0x4e8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	dd02      	ble.n	800071a <fsm_automatic_run+0x456>
				index_buffer_vertical = 0;
 8000714:	4b25      	ldr	r3, [pc, #148]	; (80007ac <fsm_automatic_run+0x4e8>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
			setTimer(4, time_scan_7seg);
 800071a:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <fsm_automatic_run+0x4ec>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4619      	mov	r1, r3
 8000720:	2004      	movs	r0, #4
 8000722:	f000 fd17 	bl	8001154 <setTimer>
		}

		if (timer_flag[3] == 1)
 8000726:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <fsm_automatic_run+0x4f0>)
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d112      	bne.n	8000754 <fsm_automatic_run+0x490>
		{
			status_vertical_traffic = AUTO_RED;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <fsm_automatic_run+0x4dc>)
 8000730:	2202      	movs	r2, #2
 8000732:	601a      	str	r2, [r3, #0]
			counter_vertical = red_duration;
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <fsm_automatic_run+0x4fc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <fsm_automatic_run+0x4e4>)
 800073a:	6013      	str	r3, [r2, #0]
			update_buffer_vertical();
 800073c:	f000 fbb8 	bl	8000eb0 <update_buffer_vertical>
			setTimer(3, red_duration * 1000);
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <fsm_automatic_run+0x4fc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000748:	fb02 f303 	mul.w	r3, r2, r3
 800074c:	4619      	mov	r1, r3
 800074e:	2003      	movs	r0, #3
 8000750:	f000 fd00 	bl	8001154 <setTimer>
		}

		if (timer_flag[5] == 1)
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <fsm_automatic_run+0x4f0>)
 8000756:	695b      	ldr	r3, [r3, #20]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d10b      	bne.n	8000774 <fsm_automatic_run+0x4b0>
		{
			counter_vertical--;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <fsm_automatic_run+0x4e4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	3b01      	subs	r3, #1
 8000762:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <fsm_automatic_run+0x4e4>)
 8000764:	6013      	str	r3, [r2, #0]
			update_buffer_vertical();
 8000766:	f000 fba3 	bl	8000eb0 <update_buffer_vertical>
			setTimer(5, 1000);
 800076a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800076e:	2005      	movs	r0, #5
 8000770:	f000 fcf0 	bl	8001154 <setTimer>
		}

		if (isButtonPressed(1) == 1)
 8000774:	2001      	movs	r0, #1
 8000776:	f7ff fce9 	bl	800014c <isButtonPressed>
 800077a:	4603      	mov	r3, r0
 800077c:	2b01      	cmp	r3, #1
 800077e:	d10c      	bne.n	800079a <fsm_automatic_run+0x4d6>
		{
			status_vertical_traffic = INIT_MODE;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <fsm_automatic_run+0x4dc>)
 8000782:	2214      	movs	r2, #20
 8000784:	601a      	str	r2, [r3, #0]
			status_horizontal_traffic = INIT_MODE;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <fsm_automatic_run+0x4f4>)
 8000788:	2214      	movs	r2, #20
 800078a:	601a      	str	r2, [r3, #0]
		}
		
		break;
 800078c:	e005      	b.n	800079a <fsm_automatic_run+0x4d6>
	default:
		break;
 800078e:	bf00      	nop
 8000790:	e004      	b.n	800079c <fsm_automatic_run+0x4d8>
		break;
 8000792:	bf00      	nop
 8000794:	e002      	b.n	800079c <fsm_automatic_run+0x4d8>
		break;
 8000796:	bf00      	nop
 8000798:	e000      	b.n	800079c <fsm_automatic_run+0x4d8>
		break;
 800079a:	bf00      	nop
	}
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000048 	.word	0x20000048
 80007a4:	20000050 	.word	0x20000050
 80007a8:	2000006c 	.word	0x2000006c
 80007ac:	200000c8 	.word	0x200000c8
 80007b0:	20000070 	.word	0x20000070
 80007b4:	200000cc 	.word	0x200000cc
 80007b8:	20000044 	.word	0x20000044
 80007bc:	20000054 	.word	0x20000054
 80007c0:	2000004c 	.word	0x2000004c

080007c4 <fsm_setting_run>:
 */

#include "fsm_setting.h"

void fsm_setting_run()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	switch (status_horizontal_traffic)
 80007c8:	4b92      	ldr	r3, [pc, #584]	; (8000a14 <fsm_setting_run+0x250>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3b14      	subs	r3, #20
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	f200 819d 	bhi.w	8000b0e <fsm_setting_run+0x34a>
 80007d4:	a201      	add	r2, pc, #4	; (adr r2, 80007dc <fsm_setting_run+0x18>)
 80007d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007da:	bf00      	nop
 80007dc:	080007f1 	.word	0x080007f1
 80007e0:	0800081b 	.word	0x0800081b
 80007e4:	08000861 	.word	0x08000861
 80007e8:	0800093f 	.word	0x0800093f
 80007ec:	08000a39 	.word	0x08000a39
	{
	case INIT_MODE:
		status_horizontal_traffic = MODE2;
 80007f0:	4b88      	ldr	r3, [pc, #544]	; (8000a14 <fsm_setting_run+0x250>)
 80007f2:	2216      	movs	r2, #22
 80007f4:	601a      	str	r2, [r3, #0]
		clear_all();
 80007f6:	f000 f9bd 	bl	8000b74 <clear_all>
		setTimer(1, 10000); // đợi nút 1 chuyển mode
 80007fa:	f242 7110 	movw	r1, #10000	; 0x2710
 80007fe:	2001      	movs	r0, #1
 8000800:	f000 fca8 	bl	8001154 <setTimer>
		setTimer(2, 250); 
 8000804:	21fa      	movs	r1, #250	; 0xfa
 8000806:	2002      	movs	r0, #2
 8000808:	f000 fca4 	bl	8001154 <setTimer>
		setTimer(3, 250); 
 800080c:	21fa      	movs	r1, #250	; 0xfa
 800080e:	2003      	movs	r0, #3
 8000810:	f000 fca0 	bl	8001154 <setTimer>

		set_tmp_duration();
 8000814:	f000 f990 	bl	8000b38 <set_tmp_duration>

		break;
 8000818:	e180      	b.n	8000b1c <fsm_setting_run+0x358>
	case MODE1:
		if (timer_flag[0] == 1)
 800081a:	4b7f      	ldr	r3, [pc, #508]	; (8000a18 <fsm_setting_run+0x254>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d105      	bne.n	800082e <fsm_setting_run+0x6a>
		{
			status_horizontal_traffic = INIT;
 8000822:	4b7c      	ldr	r3, [pc, #496]	; (8000a14 <fsm_setting_run+0x250>)
 8000824:	2201      	movs	r2, #1
 8000826:	601a      	str	r2, [r3, #0]
			status_vertical_traffic = INIT;
 8000828:	4b7c      	ldr	r3, [pc, #496]	; (8000a1c <fsm_setting_run+0x258>)
 800082a:	2201      	movs	r2, #1
 800082c:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(1) == 1)
 800082e:	2001      	movs	r0, #1
 8000830:	f7ff fc8c 	bl	800014c <isButtonPressed>
 8000834:	4603      	mov	r3, r0
 8000836:	2b01      	cmp	r3, #1
 8000838:	d10f      	bne.n	800085a <fsm_setting_run+0x96>
		{
			status_horizontal_traffic = MODE2;
 800083a:	4b76      	ldr	r3, [pc, #472]	; (8000a14 <fsm_setting_run+0x250>)
 800083c:	2216      	movs	r2, #22
 800083e:	601a      	str	r2, [r3, #0]
			setTimer(1, 10000); // đợi nút 1 chuyển mode
 8000840:	f242 7110 	movw	r1, #10000	; 0x2710
 8000844:	2001      	movs	r0, #1
 8000846:	f000 fc85 	bl	8001154 <setTimer>
			setTimer(2, 250); 
 800084a:	21fa      	movs	r1, #250	; 0xfa
 800084c:	2002      	movs	r0, #2
 800084e:	f000 fc81 	bl	8001154 <setTimer>
			setTimer(3, 250);
 8000852:	21fa      	movs	r1, #250	; 0xfa
 8000854:	2003      	movs	r0, #3
 8000856:	f000 fc7d 	bl	8001154 <setTimer>
		}
		set_tmp_duration();
 800085a:	f000 f96d 	bl	8000b38 <set_tmp_duration>

		break;
 800085e:	e15d      	b.n	8000b1c <fsm_setting_run+0x358>
	case MODE2:
		enable_vertical(0);
 8000860:	2000      	movs	r0, #0
 8000862:	f000 fa75 	bl	8000d50 <enable_vertical>
		display_number_vertical(2);
 8000866:	2002      	movs	r0, #2
 8000868:	f000 f98c 	bl	8000b84 <display_number_vertical>
		counter_horizontal = red_duration_tmp;
 800086c:	4b6c      	ldr	r3, [pc, #432]	; (8000a20 <fsm_setting_run+0x25c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a6c      	ldr	r2, [pc, #432]	; (8000a24 <fsm_setting_run+0x260>)
 8000872:	6013      	str	r3, [r2, #0]
		update_buffer_horizontal();
 8000874:	f000 faf6 	bl	8000e64 <update_buffer_horizontal>

		if (timer_flag[3] == 1)
 8000878:	4b67      	ldr	r3, [pc, #412]	; (8000a18 <fsm_setting_run+0x254>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d112      	bne.n	80008a6 <fsm_setting_run+0xe2>
		{
			update_7seg_horizontal(index_buffer_horizontal++);
 8000880:	4b69      	ldr	r3, [pc, #420]	; (8000a28 <fsm_setting_run+0x264>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	1c5a      	adds	r2, r3, #1
 8000886:	4968      	ldr	r1, [pc, #416]	; (8000a28 <fsm_setting_run+0x264>)
 8000888:	600a      	str	r2, [r1, #0]
 800088a:	4618      	mov	r0, r3
 800088c:	f000 faa2 	bl	8000dd4 <update_7seg_horizontal>
			if (index_buffer_horizontal >= 2)
 8000890:	4b65      	ldr	r3, [pc, #404]	; (8000a28 <fsm_setting_run+0x264>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b01      	cmp	r3, #1
 8000896:	dd02      	ble.n	800089e <fsm_setting_run+0xda>
				index_buffer_horizontal = 0;
 8000898:	4b63      	ldr	r3, [pc, #396]	; (8000a28 <fsm_setting_run+0x264>)
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 800089e:	21fa      	movs	r1, #250	; 0xfa
 80008a0:	2003      	movs	r0, #3
 80008a2:	f000 fc57 	bl	8001154 <setTimer>
		}

		if (timer_flag[2] == 1)
 80008a6:	4b5c      	ldr	r3, [pc, #368]	; (8000a18 <fsm_setting_run+0x254>)
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d105      	bne.n	80008ba <fsm_setting_run+0xf6>
		{
			custom_red_mode();
 80008ae:	f000 fdd7 	bl	8001460 <custom_red_mode>
			setTimer(2, 250);
 80008b2:	21fa      	movs	r1, #250	; 0xfa
 80008b4:	2002      	movs	r0, #2
 80008b6:	f000 fc4d 	bl	8001154 <setTimer>
		}
		if (isButtonPressed(1) == 1)
 80008ba:	2001      	movs	r0, #1
 80008bc:	f7ff fc46 	bl	800014c <isButtonPressed>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d107      	bne.n	80008d6 <fsm_setting_run+0x112>
		{
			status_horizontal_traffic = MODE3;
 80008c6:	4b53      	ldr	r3, [pc, #332]	; (8000a14 <fsm_setting_run+0x250>)
 80008c8:	2217      	movs	r2, #23
 80008ca:	601a      	str	r2, [r3, #0]
			setTimer(1, 10000);
 80008cc:	f242 7110 	movw	r1, #10000	; 0x2710
 80008d0:	2001      	movs	r0, #1
 80008d2:	f000 fc3f 	bl	8001154 <setTimer>
		}
		if (isButtonPressed(2) == 1)
 80008d6:	2002      	movs	r0, #2
 80008d8:	f7ff fc38 	bl	800014c <isButtonPressed>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d110      	bne.n	8000904 <fsm_setting_run+0x140>
		{
			red_duration_tmp++;
 80008e2:	4b4f      	ldr	r3, [pc, #316]	; (8000a20 <fsm_setting_run+0x25c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	3301      	adds	r3, #1
 80008e8:	4a4d      	ldr	r2, [pc, #308]	; (8000a20 <fsm_setting_run+0x25c>)
 80008ea:	6013      	str	r3, [r2, #0]
			if (red_duration_tmp > 99)
 80008ec:	4b4c      	ldr	r3, [pc, #304]	; (8000a20 <fsm_setting_run+0x25c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b63      	cmp	r3, #99	; 0x63
 80008f2:	dd02      	ble.n	80008fa <fsm_setting_run+0x136>
				red_duration_tmp = 0;
 80008f4:	4b4a      	ldr	r3, [pc, #296]	; (8000a20 <fsm_setting_run+0x25c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
			setTimer(1, 10000);
 80008fa:	f242 7110 	movw	r1, #10000	; 0x2710
 80008fe:	2001      	movs	r0, #1
 8000900:	f000 fc28 	bl	8001154 <setTimer>
		}
		if (isButtonPressed(3) == 1)
 8000904:	2003      	movs	r0, #3
 8000906:	f7ff fc21 	bl	800014c <isButtonPressed>
 800090a:	4603      	mov	r3, r0
 800090c:	2b01      	cmp	r3, #1
 800090e:	d10d      	bne.n	800092c <fsm_setting_run+0x168>
		{
			red_duration = red_duration_tmp;
 8000910:	4b43      	ldr	r3, [pc, #268]	; (8000a20 <fsm_setting_run+0x25c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a45      	ldr	r2, [pc, #276]	; (8000a2c <fsm_setting_run+0x268>)
 8000916:	6013      	str	r3, [r2, #0]
			status_horizontal_traffic = MODE1;
 8000918:	4b3e      	ldr	r3, [pc, #248]	; (8000a14 <fsm_setting_run+0x250>)
 800091a:	2215      	movs	r2, #21
 800091c:	601a      	str	r2, [r3, #0]
			clear_all();
 800091e:	f000 f929 	bl	8000b74 <clear_all>
			setTimer(0, 1000);
 8000922:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000926:	2000      	movs	r0, #0
 8000928:	f000 fc14 	bl	8001154 <setTimer>
		}
		if (timer_flag[1] == 1)
 800092c:	4b3a      	ldr	r3, [pc, #232]	; (8000a18 <fsm_setting_run+0x254>)
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	2b01      	cmp	r3, #1
 8000932:	f040 80ee 	bne.w	8000b12 <fsm_setting_run+0x34e>
		{
			status_horizontal_traffic = MODE1;
 8000936:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <fsm_setting_run+0x250>)
 8000938:	2215      	movs	r2, #21
 800093a:	601a      	str	r2, [r3, #0]
		}

		break;
 800093c:	e0e9      	b.n	8000b12 <fsm_setting_run+0x34e>
	case MODE3:
		enable_vertical(0);
 800093e:	2000      	movs	r0, #0
 8000940:	f000 fa06 	bl	8000d50 <enable_vertical>
		display_number_vertical(3);
 8000944:	2003      	movs	r0, #3
 8000946:	f000 f91d 	bl	8000b84 <display_number_vertical>
		counter_horizontal = green_duration_tmp;
 800094a:	4b39      	ldr	r3, [pc, #228]	; (8000a30 <fsm_setting_run+0x26c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a35      	ldr	r2, [pc, #212]	; (8000a24 <fsm_setting_run+0x260>)
 8000950:	6013      	str	r3, [r2, #0]
		update_buffer_horizontal();
 8000952:	f000 fa87 	bl	8000e64 <update_buffer_horizontal>

		if (timer_flag[3] == 1)
 8000956:	4b30      	ldr	r3, [pc, #192]	; (8000a18 <fsm_setting_run+0x254>)
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d112      	bne.n	8000984 <fsm_setting_run+0x1c0>
		{
			update_7seg_horizontal(index_buffer_horizontal++);
 800095e:	4b32      	ldr	r3, [pc, #200]	; (8000a28 <fsm_setting_run+0x264>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	4930      	ldr	r1, [pc, #192]	; (8000a28 <fsm_setting_run+0x264>)
 8000966:	600a      	str	r2, [r1, #0]
 8000968:	4618      	mov	r0, r3
 800096a:	f000 fa33 	bl	8000dd4 <update_7seg_horizontal>
			if (index_buffer_horizontal >= 2)
 800096e:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <fsm_setting_run+0x264>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b01      	cmp	r3, #1
 8000974:	dd02      	ble.n	800097c <fsm_setting_run+0x1b8>
				index_buffer_horizontal = 0;
 8000976:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <fsm_setting_run+0x264>)
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 800097c:	21fa      	movs	r1, #250	; 0xfa
 800097e:	2003      	movs	r0, #3
 8000980:	f000 fbe8 	bl	8001154 <setTimer>
		}

		if (timer_flag[2] == 1)
 8000984:	4b24      	ldr	r3, [pc, #144]	; (8000a18 <fsm_setting_run+0x254>)
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d105      	bne.n	8000998 <fsm_setting_run+0x1d4>
		{
			custom_green_mode();
 800098c:	f000 fd8a 	bl	80014a4 <custom_green_mode>
			setTimer(2, 250);
 8000990:	21fa      	movs	r1, #250	; 0xfa
 8000992:	2002      	movs	r0, #2
 8000994:	f000 fbde 	bl	8001154 <setTimer>
		}
		if (isButtonPressed(1) == 1)
 8000998:	2001      	movs	r0, #1
 800099a:	f7ff fbd7 	bl	800014c <isButtonPressed>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d107      	bne.n	80009b4 <fsm_setting_run+0x1f0>
		{
			status_horizontal_traffic = MODE4;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <fsm_setting_run+0x250>)
 80009a6:	2218      	movs	r2, #24
 80009a8:	601a      	str	r2, [r3, #0]
			setTimer(1, 10000);
 80009aa:	f242 7110 	movw	r1, #10000	; 0x2710
 80009ae:	2001      	movs	r0, #1
 80009b0:	f000 fbd0 	bl	8001154 <setTimer>
		}
		if (isButtonPressed(2) == 1)
 80009b4:	2002      	movs	r0, #2
 80009b6:	f7ff fbc9 	bl	800014c <isButtonPressed>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d10b      	bne.n	80009d8 <fsm_setting_run+0x214>
		{
			// Tang thoi gian green
			green_duration_tmp++;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <fsm_setting_run+0x26c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	3301      	adds	r3, #1
 80009c6:	4a1a      	ldr	r2, [pc, #104]	; (8000a30 <fsm_setting_run+0x26c>)
 80009c8:	6013      	str	r3, [r2, #0]
			if (green_duration_tmp > 99)
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <fsm_setting_run+0x26c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b63      	cmp	r3, #99	; 0x63
 80009d0:	dd02      	ble.n	80009d8 <fsm_setting_run+0x214>
				green_duration_tmp = 0;
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <fsm_setting_run+0x26c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(3) == 1)
 80009d8:	2003      	movs	r0, #3
 80009da:	f7ff fbb7 	bl	800014c <isButtonPressed>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d10d      	bne.n	8000a00 <fsm_setting_run+0x23c>
		{
			green_duration = green_duration_tmp;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <fsm_setting_run+0x26c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <fsm_setting_run+0x270>)
 80009ea:	6013      	str	r3, [r2, #0]
			status_horizontal_traffic = MODE1;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <fsm_setting_run+0x250>)
 80009ee:	2215      	movs	r2, #21
 80009f0:	601a      	str	r2, [r3, #0]
			clear_all();
 80009f2:	f000 f8bf 	bl	8000b74 <clear_all>
			setTimer(0, 1000);
 80009f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009fa:	2000      	movs	r0, #0
 80009fc:	f000 fbaa 	bl	8001154 <setTimer>
		}
		if (timer_flag[1] == 1)
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <fsm_setting_run+0x254>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	f040 8086 	bne.w	8000b16 <fsm_setting_run+0x352>
		{
			status_horizontal_traffic = MODE1;
 8000a0a:	4b02      	ldr	r3, [pc, #8]	; (8000a14 <fsm_setting_run+0x250>)
 8000a0c:	2215      	movs	r2, #21
 8000a0e:	601a      	str	r2, [r3, #0]
		}

		break;
 8000a10:	e081      	b.n	8000b16 <fsm_setting_run+0x352>
 8000a12:	bf00      	nop
 8000a14:	20000044 	.word	0x20000044
 8000a18:	200000cc 	.word	0x200000cc
 8000a1c:	20000048 	.word	0x20000048
 8000a20:	200000b8 	.word	0x200000b8
 8000a24:	20000068 	.word	0x20000068
 8000a28:	200000c4 	.word	0x200000c4
 8000a2c:	2000004c 	.word	0x2000004c
 8000a30:	200000bc 	.word	0x200000bc
 8000a34:	20000050 	.word	0x20000050
	case MODE4:
		enable_vertical(0);
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f000 f989 	bl	8000d50 <enable_vertical>
		display_number_vertical(4);
 8000a3e:	2004      	movs	r0, #4
 8000a40:	f000 f8a0 	bl	8000b84 <display_number_vertical>
		counter_horizontal = yellow_duration_tmp;
 8000a44:	4b36      	ldr	r3, [pc, #216]	; (8000b20 <fsm_setting_run+0x35c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a36      	ldr	r2, [pc, #216]	; (8000b24 <fsm_setting_run+0x360>)
 8000a4a:	6013      	str	r3, [r2, #0]
		update_buffer_horizontal();
 8000a4c:	f000 fa0a 	bl	8000e64 <update_buffer_horizontal>

		if (timer_flag[3] == 1)
 8000a50:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <fsm_setting_run+0x364>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d112      	bne.n	8000a7e <fsm_setting_run+0x2ba>
		{
			update_7seg_horizontal(index_buffer_horizontal++);
 8000a58:	4b34      	ldr	r3, [pc, #208]	; (8000b2c <fsm_setting_run+0x368>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	1c5a      	adds	r2, r3, #1
 8000a5e:	4933      	ldr	r1, [pc, #204]	; (8000b2c <fsm_setting_run+0x368>)
 8000a60:	600a      	str	r2, [r1, #0]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f9b6 	bl	8000dd4 <update_7seg_horizontal>
			if (index_buffer_horizontal >= 2)
 8000a68:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <fsm_setting_run+0x368>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	dd02      	ble.n	8000a76 <fsm_setting_run+0x2b2>
				index_buffer_horizontal = 0;
 8000a70:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <fsm_setting_run+0x368>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 8000a76:	21fa      	movs	r1, #250	; 0xfa
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 fb6b 	bl	8001154 <setTimer>
		}

		if (timer_flag[2] == 1)
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <fsm_setting_run+0x364>)
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d105      	bne.n	8000a92 <fsm_setting_run+0x2ce>
		{
			custom_yellow_mode();
 8000a86:	f000 fd2f 	bl	80014e8 <custom_yellow_mode>
			setTimer(2, 250);
 8000a8a:	21fa      	movs	r1, #250	; 0xfa
 8000a8c:	2002      	movs	r0, #2
 8000a8e:	f000 fb61 	bl	8001154 <setTimer>
		}
		if (isButtonPressed(1) == 1)
 8000a92:	2001      	movs	r0, #1
 8000a94:	f7ff fb5a 	bl	800014c <isButtonPressed>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d109      	bne.n	8000ab2 <fsm_setting_run+0x2ee>
		{
			status_horizontal_traffic = MODE1;
 8000a9e:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <fsm_setting_run+0x36c>)
 8000aa0:	2215      	movs	r2, #21
 8000aa2:	601a      	str	r2, [r3, #0]
			clear_all();
 8000aa4:	f000 f866 	bl	8000b74 <clear_all>
			setTimer(0, 1000);
 8000aa8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 fb51 	bl	8001154 <setTimer>
		}
		if (isButtonPressed(2) == 1)
 8000ab2:	2002      	movs	r0, #2
 8000ab4:	f7ff fb4a 	bl	800014c <isButtonPressed>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d10b      	bne.n	8000ad6 <fsm_setting_run+0x312>
		{
			// Tang thoi gian yellow
			yellow_duration_tmp++;
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <fsm_setting_run+0x35c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	4a16      	ldr	r2, [pc, #88]	; (8000b20 <fsm_setting_run+0x35c>)
 8000ac6:	6013      	str	r3, [r2, #0]
			if (yellow_duration_tmp > 99)
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <fsm_setting_run+0x35c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b63      	cmp	r3, #99	; 0x63
 8000ace:	dd02      	ble.n	8000ad6 <fsm_setting_run+0x312>
				yellow_duration_tmp = 0;
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <fsm_setting_run+0x35c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(3) == 1)
 8000ad6:	2003      	movs	r0, #3
 8000ad8:	f7ff fb38 	bl	800014c <isButtonPressed>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d10d      	bne.n	8000afe <fsm_setting_run+0x33a>
		{
			yellow_duration = yellow_duration_tmp;
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <fsm_setting_run+0x35c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a13      	ldr	r2, [pc, #76]	; (8000b34 <fsm_setting_run+0x370>)
 8000ae8:	6013      	str	r3, [r2, #0]
			status_horizontal_traffic = MODE1;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <fsm_setting_run+0x36c>)
 8000aec:	2215      	movs	r2, #21
 8000aee:	601a      	str	r2, [r3, #0]
			clear_all();
 8000af0:	f000 f840 	bl	8000b74 <clear_all>
			setTimer(0, 1000);
 8000af4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000af8:	2000      	movs	r0, #0
 8000afa:	f000 fb2b 	bl	8001154 <setTimer>
		}
		if (timer_flag[1] == 1)
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <fsm_setting_run+0x364>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d109      	bne.n	8000b1a <fsm_setting_run+0x356>
		{
			status_horizontal_traffic = MODE1;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <fsm_setting_run+0x36c>)
 8000b08:	2215      	movs	r2, #21
 8000b0a:	601a      	str	r2, [r3, #0]
		}

		break;
 8000b0c:	e005      	b.n	8000b1a <fsm_setting_run+0x356>
	default:
		break;
 8000b0e:	bf00      	nop
 8000b10:	e004      	b.n	8000b1c <fsm_setting_run+0x358>
		break;
 8000b12:	bf00      	nop
 8000b14:	e002      	b.n	8000b1c <fsm_setting_run+0x358>
		break;
 8000b16:	bf00      	nop
 8000b18:	e000      	b.n	8000b1c <fsm_setting_run+0x358>
		break;
 8000b1a:	bf00      	nop
	}
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200000c0 	.word	0x200000c0
 8000b24:	20000068 	.word	0x20000068
 8000b28:	200000cc 	.word	0x200000cc
 8000b2c:	200000c4 	.word	0x200000c4
 8000b30:	20000044 	.word	0x20000044
 8000b34:	20000054 	.word	0x20000054

08000b38 <set_tmp_duration>:
int counter_vertical = 3;

int time_scan_7seg = 500;

void set_tmp_duration()
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
    red_duration_tmp = red_duration;
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <set_tmp_duration+0x24>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <set_tmp_duration+0x28>)
 8000b42:	6013      	str	r3, [r2, #0]
	green_duration_tmp = green_duration;
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <set_tmp_duration+0x2c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <set_tmp_duration+0x30>)
 8000b4a:	6013      	str	r3, [r2, #0]
	yellow_duration_tmp = yellow_duration;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <set_tmp_duration+0x34>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <set_tmp_duration+0x38>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	2000004c 	.word	0x2000004c
 8000b60:	200000b8 	.word	0x200000b8
 8000b64:	20000050 	.word	0x20000050
 8000b68:	200000bc 	.word	0x200000bc
 8000b6c:	20000054 	.word	0x20000054
 8000b70:	200000c0 	.word	0x200000c0

08000b74 <clear_all>:

void clear_all()
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
    clear_all_7seg();
 8000b78:	f000 f912 	bl	8000da0 <clear_all_7seg>
    clear_all_led();
 8000b7c:	f000 fbc8 	bl	8001310 <clear_all_led>
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <display_number_vertical>:
		0x78,
		0x00,
		0x10};

void display_number_vertical(int number)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	char code = seg[number];
 8000b8c:	4a29      	ldr	r2, [pc, #164]	; (8000c34 <display_number_vertical+0xb0>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	73fb      	strb	r3, [r7, #15]

	// Kiem tra bit tuong ung SEG cua so can hien thi neu = 1 thi SEG OFF
	HAL_GPIO_WritePin(SEG0_A_GPIO_Port, SEG0_A_Pin, (code & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4825      	ldr	r0, [pc, #148]	; (8000c38 <display_number_vertical+0xb4>)
 8000ba4:	f000 ffe9 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG0_B_GPIO_Port, SEG0_B_Pin, (code & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	105b      	asrs	r3, r3, #1
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	481f      	ldr	r0, [pc, #124]	; (8000c38 <display_number_vertical+0xb4>)
 8000bba:	f000 ffde 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG0_C_GPIO_Port, SEG0_C_Pin, (code & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
 8000bc0:	109b      	asrs	r3, r3, #2
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	461a      	mov	r2, r3
 8000bcc:	2104      	movs	r1, #4
 8000bce:	481a      	ldr	r0, [pc, #104]	; (8000c38 <display_number_vertical+0xb4>)
 8000bd0:	f000 ffd3 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG0_D_GPIO_Port, SEG0_D_Pin, (code & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	10db      	asrs	r3, r3, #3
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	461a      	mov	r2, r3
 8000be2:	2108      	movs	r1, #8
 8000be4:	4814      	ldr	r0, [pc, #80]	; (8000c38 <display_number_vertical+0xb4>)
 8000be6:	f000 ffc8 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG0_E_GPIO_Port, SEG0_E_Pin, (code & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	111b      	asrs	r3, r3, #4
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	2110      	movs	r1, #16
 8000bfa:	480f      	ldr	r0, [pc, #60]	; (8000c38 <display_number_vertical+0xb4>)
 8000bfc:	f000 ffbd 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG0_F_GPIO_Port, SEG0_F_Pin, (code & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	115b      	asrs	r3, r3, #5
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	2120      	movs	r1, #32
 8000c10:	4809      	ldr	r0, [pc, #36]	; (8000c38 <display_number_vertical+0xb4>)
 8000c12:	f000 ffb2 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG0_G_GPIO_Port, SEG0_G_Pin, (code & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	119b      	asrs	r3, r3, #6
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	461a      	mov	r2, r3
 8000c24:	2140      	movs	r1, #64	; 0x40
 8000c26:	4804      	ldr	r0, [pc, #16]	; (8000c38 <display_number_vertical+0xb4>)
 8000c28:	f000 ffa7 	bl	8001b7a <HAL_GPIO_WritePin>
}
 8000c2c:	bf00      	nop
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000074 	.word	0x20000074
 8000c38:	40010c00 	.word	0x40010c00

08000c3c <display_number_horizontal>:

void display_number_horizontal(int number)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	char code = seg[number];
 8000c44:	4a2c      	ldr	r2, [pc, #176]	; (8000cf8 <display_number_horizontal+0xbc>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	73fb      	strb	r3, [r7, #15]

	// Kiem tra bit tuong ung SEG cua so can hien thi neu = 1 thi SEG OFF
	HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, (code & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	461a      	mov	r2, r3
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	4828      	ldr	r0, [pc, #160]	; (8000cfc <display_number_horizontal+0xc0>)
 8000c5c:	f000 ff8d 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, (code & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	105b      	asrs	r3, r3, #1
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c72:	4822      	ldr	r0, [pc, #136]	; (8000cfc <display_number_horizontal+0xc0>)
 8000c74:	f000 ff81 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, (code & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	109b      	asrs	r3, r3, #2
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	461a      	mov	r2, r3
 8000c86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c8a:	481c      	ldr	r0, [pc, #112]	; (8000cfc <display_number_horizontal+0xc0>)
 8000c8c:	f000 ff75 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, (code & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	10db      	asrs	r3, r3, #3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca2:	4816      	ldr	r0, [pc, #88]	; (8000cfc <display_number_horizontal+0xc0>)
 8000ca4:	f000 ff69 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, (code & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	111b      	asrs	r3, r3, #4
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cba:	4810      	ldr	r0, [pc, #64]	; (8000cfc <display_number_horizontal+0xc0>)
 8000cbc:	f000 ff5d 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, (code & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	115b      	asrs	r3, r3, #5
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	461a      	mov	r2, r3
 8000cce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd2:	480a      	ldr	r0, [pc, #40]	; (8000cfc <display_number_horizontal+0xc0>)
 8000cd4:	f000 ff51 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, (code & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	119b      	asrs	r3, r3, #6
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cea:	4804      	ldr	r0, [pc, #16]	; (8000cfc <display_number_horizontal+0xc0>)
 8000cec:	f000 ff45 	bl	8001b7a <HAL_GPIO_WritePin>
}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000074 	.word	0x20000074
 8000cfc:	40010c00 	.word	0x40010c00

08000d00 <enable_horizontal>:

void enable_horizontal(int index)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	if (index == 0)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d10b      	bne.n	8000d26 <enable_horizontal+0x26>
	{
		HAL_GPIO_WritePin(GPIOA, EN2_Pin, RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <enable_horizontal+0x4c>)
 8000d16:	f000 ff30 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN3_Pin, SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d20:	480a      	ldr	r0, [pc, #40]	; (8000d4c <enable_horizontal+0x4c>)
 8000d22:	f000 ff2a 	bl	8001b7a <HAL_GPIO_WritePin>
	}
	if (index == 1)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d10b      	bne.n	8000d44 <enable_horizontal+0x44>
	{
		HAL_GPIO_WritePin(GPIOA, EN3_Pin, RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <enable_horizontal+0x4c>)
 8000d34:	f000 ff21 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN2_Pin, SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d3e:	4803      	ldr	r0, [pc, #12]	; (8000d4c <enable_horizontal+0x4c>)
 8000d40:	f000 ff1b 	bl	8001b7a <HAL_GPIO_WritePin>
	}
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40010800 	.word	0x40010800

08000d50 <enable_vertical>:

void enable_vertical(int index)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	if (index == 0)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d10b      	bne.n	8000d76 <enable_vertical+0x26>
	{
		HAL_GPIO_WritePin(GPIOA, EN0_Pin, RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d64:	480d      	ldr	r0, [pc, #52]	; (8000d9c <enable_vertical+0x4c>)
 8000d66:	f000 ff08 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN1_Pin, SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d70:	480a      	ldr	r0, [pc, #40]	; (8000d9c <enable_vertical+0x4c>)
 8000d72:	f000 ff02 	bl	8001b7a <HAL_GPIO_WritePin>
	}
	if (index == 1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d10b      	bne.n	8000d94 <enable_vertical+0x44>
	{
		HAL_GPIO_WritePin(GPIOA, EN1_Pin, RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d82:	4806      	ldr	r0, [pc, #24]	; (8000d9c <enable_vertical+0x4c>)
 8000d84:	f000 fef9 	bl	8001b7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin, SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <enable_vertical+0x4c>)
 8000d90:	f000 fef3 	bl	8001b7a <HAL_GPIO_WritePin>
	}
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40010800 	.word	0x40010800

08000da0 <clear_all_7seg>:

void clear_all_7seg()
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin, SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000daa:	4808      	ldr	r0, [pc, #32]	; (8000dcc <clear_all_7seg+0x2c>)
 8000dac:	f000 fee5 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG0_A_Pin | SEG0_B_Pin | SEG0_C_Pin | SEG0_D_Pin | SEG0_E_Pin | SEG0_F_Pin | SEG0_G_Pin, SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	217f      	movs	r1, #127	; 0x7f
 8000db4:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <clear_all_7seg+0x30>)
 8000db6:	f000 fee0 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG1_A_Pin | SEG1_B_Pin | SEG1_C_Pin | SEG1_D_Pin | SEG1_E_Pin | SEG1_F_Pin | SEG1_G_Pin, SET);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 8000dc0:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <clear_all_7seg+0x30>)
 8000dc2:	f000 feda 	bl	8001b7a <HAL_GPIO_WritePin>
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40010800 	.word	0x40010800
 8000dd0:	40010c00 	.word	0x40010c00

08000dd4 <update_7seg_horizontal>:

void update_7seg_horizontal(int index_buffer_horizontal)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	switch (index_buffer_horizontal)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <update_7seg_horizontal+0x16>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d009      	beq.n	8000dfc <update_7seg_horizontal+0x28>
	case 1:
		enable_horizontal(1);
		display_number_horizontal(led_buffer_horizontal[1]);
		break;
	default:
		break;
 8000de8:	e011      	b.n	8000e0e <update_7seg_horizontal+0x3a>
		enable_horizontal(0);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff ff88 	bl	8000d00 <enable_horizontal>
		display_number_horizontal(led_buffer_horizontal[0]);
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <update_7seg_horizontal+0x44>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff21 	bl	8000c3c <display_number_horizontal>
		break;
 8000dfa:	e008      	b.n	8000e0e <update_7seg_horizontal+0x3a>
		enable_horizontal(1);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f7ff ff7f 	bl	8000d00 <enable_horizontal>
		display_number_horizontal(led_buffer_horizontal[1]);
 8000e02:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <update_7seg_horizontal+0x44>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff18 	bl	8000c3c <display_number_horizontal>
		break;
 8000e0c:	bf00      	nop
	}
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000058 	.word	0x20000058

08000e1c <update_7seg_vertical>:

void update_7seg_vertical(int index_buffer_vertical)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	switch (index_buffer_vertical)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <update_7seg_vertical+0x16>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d009      	beq.n	8000e44 <update_7seg_vertical+0x28>
	case 1:
		enable_vertical(1);
		display_number_vertical(led_buffer_vertical[1]);
		break;
	default:
		break;
 8000e30:	e011      	b.n	8000e56 <update_7seg_vertical+0x3a>
		enable_vertical(0);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff ff8c 	bl	8000d50 <enable_vertical>
		display_number_vertical(led_buffer_vertical[0]);
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <update_7seg_vertical+0x44>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fea1 	bl	8000b84 <display_number_vertical>
		break;
 8000e42:	e008      	b.n	8000e56 <update_7seg_vertical+0x3a>
		enable_vertical(1);
 8000e44:	2001      	movs	r0, #1
 8000e46:	f7ff ff83 	bl	8000d50 <enable_vertical>
		display_number_vertical(led_buffer_vertical[1]);
 8000e4a:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <update_7seg_vertical+0x44>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fe98 	bl	8000b84 <display_number_vertical>
		break;
 8000e54:	bf00      	nop
	}
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000060 	.word	0x20000060

08000e64 <update_buffer_horizontal>:

void update_buffer_horizontal()
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
	led_buffer_horizontal[0] = counter_horizontal / 10;
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <update_buffer_horizontal+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <update_buffer_horizontal+0x44>)
 8000e6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e72:	1092      	asrs	r2, r2, #2
 8000e74:	17db      	asrs	r3, r3, #31
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	4a0c      	ldr	r2, [pc, #48]	; (8000eac <update_buffer_horizontal+0x48>)
 8000e7a:	6013      	str	r3, [r2, #0]
	led_buffer_horizontal[1] = counter_horizontal % 10;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <update_buffer_horizontal+0x40>)
 8000e7e:	6819      	ldr	r1, [r3, #0]
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <update_buffer_horizontal+0x44>)
 8000e82:	fb83 2301 	smull	r2, r3, r3, r1
 8000e86:	109a      	asrs	r2, r3, #2
 8000e88:	17cb      	asrs	r3, r1, #31
 8000e8a:	1ad2      	subs	r2, r2, r3
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	1aca      	subs	r2, r1, r3
 8000e96:	4b05      	ldr	r3, [pc, #20]	; (8000eac <update_buffer_horizontal+0x48>)
 8000e98:	605a      	str	r2, [r3, #4]
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000068 	.word	0x20000068
 8000ea8:	66666667 	.word	0x66666667
 8000eac:	20000058 	.word	0x20000058

08000eb0 <update_buffer_vertical>:

void update_buffer_vertical()
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
	led_buffer_vertical[0] = counter_vertical / 10;
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <update_buffer_vertical+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <update_buffer_vertical+0x44>)
 8000eba:	fb82 1203 	smull	r1, r2, r2, r3
 8000ebe:	1092      	asrs	r2, r2, #2
 8000ec0:	17db      	asrs	r3, r3, #31
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <update_buffer_vertical+0x48>)
 8000ec6:	6013      	str	r3, [r2, #0]
	led_buffer_vertical[1] = counter_vertical % 10;
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <update_buffer_vertical+0x40>)
 8000eca:	6819      	ldr	r1, [r3, #0]
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <update_buffer_vertical+0x44>)
 8000ece:	fb83 2301 	smull	r2, r3, r3, r1
 8000ed2:	109a      	asrs	r2, r3, #2
 8000ed4:	17cb      	asrs	r3, r1, #31
 8000ed6:	1ad2      	subs	r2, r2, r3
 8000ed8:	4613      	mov	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4413      	add	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	1aca      	subs	r2, r1, r3
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <update_buffer_vertical+0x48>)
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	2000006c 	.word	0x2000006c
 8000ef4:	66666667 	.word	0x66666667
 8000ef8:	20000060 	.word	0x20000060

08000efc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f00:	f000 fb3a 	bl	8001578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f04:	f000 f81c 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f08:	f000 f8a2 	bl	8001050 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f0c:	f000 f854 	bl	8000fb8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f10:	4808      	ldr	r0, [pc, #32]	; (8000f34 <main+0x38>)
 8000f12:	f001 fa8f 	bl	8002434 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status_horizontal_traffic = INIT;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <main+0x3c>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]
  status_vertical_traffic = INIT;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <main+0x40>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	601a      	str	r2, [r3, #0]
  clear_all_led();
 8000f22:	f000 f9f5 	bl	8001310 <clear_all_led>
  clear_all_7seg();
 8000f26:	f7ff ff3b 	bl	8000da0 <clear_all_7seg>
  while (1)
  {
    fsm_automatic_run();
 8000f2a:	f7ff f9cb 	bl	80002c4 <fsm_automatic_run>
    fsm_setting_run();
 8000f2e:	f7ff fc49 	bl	80007c4 <fsm_setting_run>
    fsm_automatic_run();
 8000f32:	e7fa      	b.n	8000f2a <main+0x2e>
 8000f34:	2000011c 	.word	0x2000011c
 8000f38:	20000044 	.word	0x20000044
 8000f3c:	20000048 	.word	0x20000048

08000f40 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b090      	sub	sp, #64	; 0x40
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0318 	add.w	r3, r7, #24
 8000f4a:	2228      	movs	r2, #40	; 0x28
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 fe20 	bl	8002b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f62:	2302      	movs	r3, #2
 8000f64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f66:	2301      	movs	r3, #1
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f6a:	2310      	movs	r3, #16
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f72:	f107 0318 	add.w	r3, r7, #24
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fe30 	bl	8001bdc <HAL_RCC_OscConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f82:	f000 f8e1 	bl	8001148 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f86:	230f      	movs	r3, #15
 8000f88:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 f89c 	bl	80020dc <HAL_RCC_ClockConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000faa:	f000 f8cd 	bl	8001148 <Error_Handler>
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3740      	adds	r7, #64	; 0x40
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	; (800104c <MX_TIM2_Init+0x94>)
 8000fd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <MX_TIM2_Init+0x94>)
 8000fde:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000fe2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <MX_TIM2_Init+0x94>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <MX_TIM2_Init+0x94>)
 8000fec:	2209      	movs	r2, #9
 8000fee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <MX_TIM2_Init+0x94>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <MX_TIM2_Init+0x94>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ffc:	4813      	ldr	r0, [pc, #76]	; (800104c <MX_TIM2_Init+0x94>)
 8000ffe:	f001 f9c9 	bl	8002394 <HAL_TIM_Base_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001008:	f000 f89e 	bl	8001148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001010:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	4619      	mov	r1, r3
 8001018:	480c      	ldr	r0, [pc, #48]	; (800104c <MX_TIM2_Init+0x94>)
 800101a:	f001 fb47 	bl	80026ac <HAL_TIM_ConfigClockSource>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001024:	f000 f890 	bl	8001148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001030:	463b      	mov	r3, r7
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_TIM2_Init+0x94>)
 8001036:	f001 fd1f 	bl	8002a78 <HAL_TIMEx_MasterConfigSynchronization>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001040:	f000 f882 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 8001044:	bf00      	nop
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000011c 	.word	0x2000011c

08001050 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001064:	4b2f      	ldr	r3, [pc, #188]	; (8001124 <MX_GPIO_Init+0xd4>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a2e      	ldr	r2, [pc, #184]	; (8001124 <MX_GPIO_Init+0xd4>)
 800106a:	f043 0320 	orr.w	r3, r3, #32
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <MX_GPIO_Init+0xd4>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0320 	and.w	r3, r3, #32
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	4b29      	ldr	r3, [pc, #164]	; (8001124 <MX_GPIO_Init+0xd4>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a28      	ldr	r2, [pc, #160]	; (8001124 <MX_GPIO_Init+0xd4>)
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b26      	ldr	r3, [pc, #152]	; (8001124 <MX_GPIO_Init+0xd4>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001094:	4b23      	ldr	r3, [pc, #140]	; (8001124 <MX_GPIO_Init+0xd4>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4a22      	ldr	r2, [pc, #136]	; (8001124 <MX_GPIO_Init+0xd4>)
 800109a:	f043 0308 	orr.w	r3, r3, #8
 800109e:	6193      	str	r3, [r2, #24]
 80010a0:	4b20      	ldr	r3, [pc, #128]	; (8001124 <MX_GPIO_Init+0xd4>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin | LED_GREEN1_Pin | LED_YELLOW1_Pin | LED_RED2_Pin | LED_GREEN2_Pin | LED_YELLOW2_Pin | EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f24f 01fc 	movw	r1, #61692	; 0xf0fc
 80010b2:	481d      	ldr	r0, [pc, #116]	; (8001128 <MX_GPIO_Init+0xd8>)
 80010b4:	f000 fd61 	bl	8001b7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_A_Pin | SEG0_B_Pin | SEG0_C_Pin | SEG1_D_Pin | SEG1_E_Pin | SEG1_F_Pin | SEG1_G_Pin | SEG0_D_Pin | SEG0_E_Pin | SEG0_F_Pin | SEG0_G_Pin | SEG1_A_Pin | SEG1_B_Pin | SEG1_C_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80010be:	481b      	ldr	r0, [pc, #108]	; (800112c <MX_GPIO_Init+0xdc>)
 80010c0:	f000 fd5b 	bl	8001b7a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED1_Pin LED_GREEN1_Pin LED_YELLOW1_Pin LED_RED2_Pin
                           LED_GREEN2_Pin LED_YELLOW2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin | LED_GREEN1_Pin | LED_YELLOW1_Pin | LED_RED2_Pin | LED_GREEN2_Pin | LED_YELLOW2_Pin | EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin;
 80010c4:	f24f 03fc 	movw	r3, #61692	; 0xf0fc
 80010c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2302      	movs	r3, #2
 80010d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	4619      	mov	r1, r3
 80010dc:	4812      	ldr	r0, [pc, #72]	; (8001128 <MX_GPIO_Init+0xd8>)
 80010de:	f000 fbbb 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_A_Pin SEG0_B_Pin SEG0_C_Pin SEG1_D_Pin
                           SEG1_E_Pin SEG1_F_Pin SEG1_G_Pin SEG0_D_Pin
                           SEG0_E_Pin SEG0_F_Pin SEG0_G_Pin SEG1_A_Pin
                           SEG1_B_Pin SEG1_C_Pin */
  GPIO_InitStruct.Pin = SEG0_A_Pin | SEG0_B_Pin | SEG0_C_Pin | SEG1_D_Pin | SEG1_E_Pin | SEG1_F_Pin | SEG1_G_Pin | SEG0_D_Pin | SEG0_E_Pin | SEG0_F_Pin | SEG0_G_Pin | SEG1_A_Pin | SEG1_B_Pin | SEG1_C_Pin;
 80010e2:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80010e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	4619      	mov	r1, r3
 80010fa:	480c      	ldr	r0, [pc, #48]	; (800112c <MX_GPIO_Init+0xdc>)
 80010fc:	f000 fbac 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin | BUTTON2_Pin | BUTTON3_Pin;
 8001100:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001104:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800110a:	2301      	movs	r3, #1
 800110c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	4619      	mov	r1, r3
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_GPIO_Init+0xd8>)
 8001116:	f000 fb9f 	bl	8001858 <HAL_GPIO_Init>
}
 800111a:	bf00      	nop
 800111c:	3720      	adds	r7, #32
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000
 8001128:	40010800 	.word	0x40010800
 800112c:	40010c00 	.word	0x40010c00

08001130 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  timerRun();
 8001138:	f000 f82c 	bl	8001194 <timerRun>
  getKeyInput();
 800113c:	f7ff f830 	bl	80001a0 <getKeyInput>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800114c:	b672      	cpsid	i
}
 800114e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001150:	e7fe      	b.n	8001150 <Error_Handler+0x8>
	...

08001154 <setTimer>:
int timer_flag[10] = {0};
int timer_counter[10] = {0};


void setTimer(int index, int duration)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TICK;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	4a09      	ldr	r2, [pc, #36]	; (8001188 <setTimer+0x34>)
 8001162:	fb82 1203 	smull	r1, r2, r2, r3
 8001166:	1092      	asrs	r2, r2, #2
 8001168:	17db      	asrs	r3, r3, #31
 800116a:	1ad2      	subs	r2, r2, r3
 800116c:	4907      	ldr	r1, [pc, #28]	; (800118c <setTimer+0x38>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001174:	4a06      	ldr	r2, [pc, #24]	; (8001190 <setTimer+0x3c>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2100      	movs	r1, #0
 800117a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	66666667 	.word	0x66666667
 800118c:	200000f4 	.word	0x200000f4
 8001190:	200000cc 	.word	0x200000cc

08001194 <timerRun>:

void timerRun()
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++)
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	e01c      	b.n	80011da <timerRun+0x46>
	{
		if (timer_counter[i] >= 0)
 80011a0:	4a12      	ldr	r2, [pc, #72]	; (80011ec <timerRun+0x58>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db13      	blt.n	80011d4 <timerRun+0x40>
		{
			timer_counter[i]--;
 80011ac:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <timerRun+0x58>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b4:	1e5a      	subs	r2, r3, #1
 80011b6:	490d      	ldr	r1, [pc, #52]	; (80011ec <timerRun+0x58>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0)
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <timerRun+0x58>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	dc04      	bgt.n	80011d4 <timerRun+0x40>
			{
				timer_flag[i] = 1;
 80011ca:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <timerRun+0x5c>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2101      	movs	r1, #1
 80011d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3301      	adds	r3, #1
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b09      	cmp	r3, #9
 80011de:	dddf      	ble.n	80011a0 <timerRun+0xc>
			}
		}
	}
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	200000f4 	.word	0x200000f4
 80011f0:	200000cc 	.word	0x200000cc

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_MspInit+0x5c>)
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	4a14      	ldr	r2, [pc, #80]	; (8001250 <HAL_MspInit+0x5c>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6193      	str	r3, [r2, #24]
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_MspInit+0x5c>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <HAL_MspInit+0x5c>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <HAL_MspInit+0x5c>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	61d3      	str	r3, [r2, #28]
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <HAL_MspInit+0x5c>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_MspInit+0x60>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_MspInit+0x60>)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	40021000 	.word	0x40021000
 8001254:	40010000 	.word	0x40010000

08001258 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001268:	d113      	bne.n	8001292 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <HAL_TIM_Base_MspInit+0x44>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	4a0b      	ldr	r2, [pc, #44]	; (800129c <HAL_TIM_Base_MspInit+0x44>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	61d3      	str	r3, [r2, #28]
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <HAL_TIM_Base_MspInit+0x44>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	201c      	movs	r0, #28
 8001288:	f000 faaf 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800128c:	201c      	movs	r0, #28
 800128e:	f000 fac8 	bl	8001822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <NMI_Handler+0x4>

080012a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <MemManage_Handler+0x4>

080012b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <BusFault_Handler+0x4>

080012b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <UsageFault_Handler+0x4>

080012be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr

080012ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr

080012d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e6:	f000 f98d 	bl	8001604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <TIM2_IRQHandler+0x10>)
 80012f6:	f001 f8e9 	bl	80024cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000011c 	.word	0x2000011c

08001304 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <clear_all_led>:
 */

#include "traffic.h"

void clear_all_led()
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8001314:	2201      	movs	r2, #1
 8001316:	2104      	movs	r1, #4
 8001318:	480e      	ldr	r0, [pc, #56]	; (8001354 <clear_all_led+0x44>)
 800131a:	f000 fc2e 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 800131e:	2201      	movs	r2, #1
 8001320:	2108      	movs	r1, #8
 8001322:	480c      	ldr	r0, [pc, #48]	; (8001354 <clear_all_led+0x44>)
 8001324:	f000 fc29 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001328:	2201      	movs	r2, #1
 800132a:	2110      	movs	r1, #16
 800132c:	4809      	ldr	r0, [pc, #36]	; (8001354 <clear_all_led+0x44>)
 800132e:	f000 fc24 	bl	8001b7a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8001332:	2201      	movs	r2, #1
 8001334:	2120      	movs	r1, #32
 8001336:	4807      	ldr	r0, [pc, #28]	; (8001354 <clear_all_led+0x44>)
 8001338:	f000 fc1f 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 800133c:	2201      	movs	r2, #1
 800133e:	2140      	movs	r1, #64	; 0x40
 8001340:	4804      	ldr	r0, [pc, #16]	; (8001354 <clear_all_led+0x44>)
 8001342:	f000 fc1a 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001346:	2201      	movs	r2, #1
 8001348:	2180      	movs	r1, #128	; 0x80
 800134a:	4802      	ldr	r0, [pc, #8]	; (8001354 <clear_all_led+0x44>)
 800134c:	f000 fc15 	bl	8001b7a <HAL_GPIO_WritePin>
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40010800 	.word	0x40010800

08001358 <red_on_vertical>:

void red_on_vertical()
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	2104      	movs	r1, #4
 8001360:	4807      	ldr	r0, [pc, #28]	; (8001380 <red_on_vertical+0x28>)
 8001362:	f000 fc0a 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001366:	2201      	movs	r2, #1
 8001368:	2108      	movs	r1, #8
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <red_on_vertical+0x28>)
 800136c:	f000 fc05 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001370:	2201      	movs	r2, #1
 8001372:	2110      	movs	r1, #16
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <red_on_vertical+0x28>)
 8001376:	f000 fc00 	bl	8001b7a <HAL_GPIO_WritePin>
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40010800 	.word	0x40010800

08001384 <green_on_vertical>:

void green_on_vertical()
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8001388:	2201      	movs	r2, #1
 800138a:	2104      	movs	r1, #4
 800138c:	4807      	ldr	r0, [pc, #28]	; (80013ac <green_on_vertical+0x28>)
 800138e:	f000 fbf4 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2108      	movs	r1, #8
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <green_on_vertical+0x28>)
 8001398:	f000 fbef 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 800139c:	2201      	movs	r2, #1
 800139e:	2110      	movs	r1, #16
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <green_on_vertical+0x28>)
 80013a2:	f000 fbea 	bl	8001b7a <HAL_GPIO_WritePin>
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40010800 	.word	0x40010800

080013b0 <yellow_on_vertical>:

void yellow_on_vertical()
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 80013b4:	2201      	movs	r2, #1
 80013b6:	2104      	movs	r1, #4
 80013b8:	4807      	ldr	r0, [pc, #28]	; (80013d8 <yellow_on_vertical+0x28>)
 80013ba:	f000 fbde 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 80013be:	2201      	movs	r2, #1
 80013c0:	2108      	movs	r1, #8
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <yellow_on_vertical+0x28>)
 80013c4:	f000 fbd9 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2110      	movs	r1, #16
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <yellow_on_vertical+0x28>)
 80013ce:	f000 fbd4 	bl	8001b7a <HAL_GPIO_WritePin>
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40010800 	.word	0x40010800

080013dc <red_on_horizontal>:

void red_on_horizontal()
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2120      	movs	r1, #32
 80013e4:	4807      	ldr	r0, [pc, #28]	; (8001404 <red_on_horizontal+0x28>)
 80013e6:	f000 fbc8 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 80013ea:	2201      	movs	r2, #1
 80013ec:	2140      	movs	r1, #64	; 0x40
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <red_on_horizontal+0x28>)
 80013f0:	f000 fbc3 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <red_on_horizontal+0x28>)
 80013fa:	f000 fbbe 	bl	8001b7a <HAL_GPIO_WritePin>
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40010800 	.word	0x40010800

08001408 <green_on_horizontal>:

void green_on_horizontal()
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 800140c:	2201      	movs	r2, #1
 800140e:	2120      	movs	r1, #32
 8001410:	4807      	ldr	r0, [pc, #28]	; (8001430 <green_on_horizontal+0x28>)
 8001412:	f000 fbb2 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	2140      	movs	r1, #64	; 0x40
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <green_on_horizontal+0x28>)
 800141c:	f000 fbad 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001420:	2201      	movs	r2, #1
 8001422:	2180      	movs	r1, #128	; 0x80
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <green_on_horizontal+0x28>)
 8001426:	f000 fba8 	bl	8001b7a <HAL_GPIO_WritePin>
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40010800 	.word	0x40010800

08001434 <yellow_on_horizontal>:

void yellow_on_horizontal()
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8001438:	2201      	movs	r2, #1
 800143a:	2120      	movs	r1, #32
 800143c:	4807      	ldr	r0, [pc, #28]	; (800145c <yellow_on_horizontal+0x28>)
 800143e:	f000 fb9c 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8001442:	2201      	movs	r2, #1
 8001444:	2140      	movs	r1, #64	; 0x40
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <yellow_on_horizontal+0x28>)
 8001448:	f000 fb97 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <yellow_on_horizontal+0x28>)
 8001452:	f000 fb92 	bl	8001b7a <HAL_GPIO_WritePin>
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40010800 	.word	0x40010800

08001460 <custom_red_mode>:

void custom_red_mode()
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001464:	2201      	movs	r2, #1
 8001466:	2108      	movs	r1, #8
 8001468:	480d      	ldr	r0, [pc, #52]	; (80014a0 <custom_red_mode+0x40>)
 800146a:	f000 fb86 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 800146e:	2201      	movs	r2, #1
 8001470:	2140      	movs	r1, #64	; 0x40
 8001472:	480b      	ldr	r0, [pc, #44]	; (80014a0 <custom_red_mode+0x40>)
 8001474:	f000 fb81 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001478:	2201      	movs	r2, #1
 800147a:	2110      	movs	r1, #16
 800147c:	4808      	ldr	r0, [pc, #32]	; (80014a0 <custom_red_mode+0x40>)
 800147e:	f000 fb7c 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001482:	2201      	movs	r2, #1
 8001484:	2180      	movs	r1, #128	; 0x80
 8001486:	4806      	ldr	r0, [pc, #24]	; (80014a0 <custom_red_mode+0x40>)
 8001488:	f000 fb77 	bl	8001b7a <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 800148c:	2104      	movs	r1, #4
 800148e:	4804      	ldr	r0, [pc, #16]	; (80014a0 <custom_red_mode+0x40>)
 8001490:	f000 fb8b 	bl	8001baa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8001494:	2120      	movs	r1, #32
 8001496:	4802      	ldr	r0, [pc, #8]	; (80014a0 <custom_red_mode+0x40>)
 8001498:	f000 fb87 	bl	8001baa <HAL_GPIO_TogglePin>
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40010800 	.word	0x40010800

080014a4 <custom_green_mode>:

void custom_green_mode()
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	2104      	movs	r1, #4
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <custom_green_mode+0x40>)
 80014ae:	f000 fb64 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80014b2:	2201      	movs	r2, #1
 80014b4:	2120      	movs	r1, #32
 80014b6:	480b      	ldr	r0, [pc, #44]	; (80014e4 <custom_green_mode+0x40>)
 80014b8:	f000 fb5f 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	2110      	movs	r1, #16
 80014c0:	4808      	ldr	r0, [pc, #32]	; (80014e4 <custom_green_mode+0x40>)
 80014c2:	f000 fb5a 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 80014c6:	2201      	movs	r2, #1
 80014c8:	2180      	movs	r1, #128	; 0x80
 80014ca:	4806      	ldr	r0, [pc, #24]	; (80014e4 <custom_green_mode+0x40>)
 80014cc:	f000 fb55 	bl	8001b7a <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 80014d0:	2108      	movs	r1, #8
 80014d2:	4804      	ldr	r0, [pc, #16]	; (80014e4 <custom_green_mode+0x40>)
 80014d4:	f000 fb69 	bl	8001baa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 80014d8:	2140      	movs	r1, #64	; 0x40
 80014da:	4802      	ldr	r0, [pc, #8]	; (80014e4 <custom_green_mode+0x40>)
 80014dc:	f000 fb65 	bl	8001baa <HAL_GPIO_TogglePin>
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40010800 	.word	0x40010800

080014e8 <custom_yellow_mode>:

void custom_yellow_mode()
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	2108      	movs	r1, #8
 80014f0:	480d      	ldr	r0, [pc, #52]	; (8001528 <custom_yellow_mode+0x40>)
 80014f2:	f000 fb42 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	2140      	movs	r1, #64	; 0x40
 80014fa:	480b      	ldr	r0, [pc, #44]	; (8001528 <custom_yellow_mode+0x40>)
 80014fc:	f000 fb3d 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8001500:	2201      	movs	r2, #1
 8001502:	2104      	movs	r1, #4
 8001504:	4808      	ldr	r0, [pc, #32]	; (8001528 <custom_yellow_mode+0x40>)
 8001506:	f000 fb38 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 800150a:	2201      	movs	r2, #1
 800150c:	2120      	movs	r1, #32
 800150e:	4806      	ldr	r0, [pc, #24]	; (8001528 <custom_yellow_mode+0x40>)
 8001510:	f000 fb33 	bl	8001b7a <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8001514:	2110      	movs	r1, #16
 8001516:	4804      	ldr	r0, [pc, #16]	; (8001528 <custom_yellow_mode+0x40>)
 8001518:	f000 fb47 	bl	8001baa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 800151c:	2180      	movs	r1, #128	; 0x80
 800151e:	4802      	ldr	r0, [pc, #8]	; (8001528 <custom_yellow_mode+0x40>)
 8001520:	f000 fb43 	bl	8001baa <HAL_GPIO_TogglePin>
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40010800 	.word	0x40010800

0800152c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800152c:	f7ff feea 	bl	8001304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001530:	480b      	ldr	r0, [pc, #44]	; (8001560 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001532:	490c      	ldr	r1, [pc, #48]	; (8001564 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001534:	4a0c      	ldr	r2, [pc, #48]	; (8001568 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a09      	ldr	r2, [pc, #36]	; (800156c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001548:	4c09      	ldr	r4, [pc, #36]	; (8001570 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001556:	f001 faf9 	bl	8002b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800155a:	f7ff fccf 	bl	8000efc <main>
  bx lr
 800155e:	4770      	bx	lr
  ldr r0, =_sdata
 8001560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001564:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001568:	08002be8 	.word	0x08002be8
  ldr r2, =_sbss
 800156c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001570:	20000168 	.word	0x20000168

08001574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001574:	e7fe      	b.n	8001574 <ADC1_2_IRQHandler>
	...

08001578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_Init+0x28>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <HAL_Init+0x28>)
 8001582:	f043 0310 	orr.w	r3, r3, #16
 8001586:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001588:	2003      	movs	r0, #3
 800158a:	f000 f923 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158e:	200f      	movs	r0, #15
 8001590:	f000 f808 	bl	80015a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001594:	f7ff fe2e 	bl	80011f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40022000 	.word	0x40022000

080015a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_InitTick+0x54>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_InitTick+0x58>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f93b 	bl	800183e <HAL_SYSTICK_Config>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00e      	b.n	80015f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d80a      	bhi.n	80015ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d8:	2200      	movs	r2, #0
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f000 f903 	bl	80017ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <HAL_InitTick+0x5c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000080 	.word	0x20000080
 80015fc:	20000088 	.word	0x20000088
 8001600:	20000084 	.word	0x20000084

08001604 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_IncTick+0x1c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b05      	ldr	r3, [pc, #20]	; (8001624 <HAL_IncTick+0x20>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	4a03      	ldr	r2, [pc, #12]	; (8001624 <HAL_IncTick+0x20>)
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000088 	.word	0x20000088
 8001624:	20000164 	.word	0x20000164

08001628 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return uwTick;
 800162c:	4b02      	ldr	r3, [pc, #8]	; (8001638 <HAL_GetTick+0x10>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	20000164 	.word	0x20000164

0800163c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166e:	4a04      	ldr	r2, [pc, #16]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	60d3      	str	r3, [r2, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	db0b      	blt.n	80016ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4906      	ldr	r1, [pc, #24]	; (80016d4 <__NVIC_EnableIRQ+0x34>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	2001      	movs	r0, #1
 80016c2:	fa00 f202 	lsl.w	r2, r0, r2
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	e000e100 	.word	0xe000e100

080016d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	db0a      	blt.n	8001702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	490c      	ldr	r1, [pc, #48]	; (8001724 <__NVIC_SetPriority+0x4c>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	0112      	lsls	r2, r2, #4
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	440b      	add	r3, r1
 80016fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001700:	e00a      	b.n	8001718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4908      	ldr	r1, [pc, #32]	; (8001728 <__NVIC_SetPriority+0x50>)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	3b04      	subs	r3, #4
 8001710:	0112      	lsls	r2, r2, #4
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	440b      	add	r3, r1
 8001716:	761a      	strb	r2, [r3, #24]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	; 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f1c3 0307 	rsb	r3, r3, #7
 8001746:	2b04      	cmp	r3, #4
 8001748:	bf28      	it	cs
 800174a:	2304      	movcs	r3, #4
 800174c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3304      	adds	r3, #4
 8001752:	2b06      	cmp	r3, #6
 8001754:	d902      	bls.n	800175c <NVIC_EncodePriority+0x30>
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3b03      	subs	r3, #3
 800175a:	e000      	b.n	800175e <NVIC_EncodePriority+0x32>
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	f04f 32ff 	mov.w	r2, #4294967295
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43da      	mvns	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	401a      	ands	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001774:	f04f 31ff 	mov.w	r1, #4294967295
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	43d9      	mvns	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	4313      	orrs	r3, r2
         );
}
 8001786:	4618      	mov	r0, r3
 8001788:	3724      	adds	r7, #36	; 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a0:	d301      	bcc.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00f      	b.n	80017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <SysTick_Config+0x40>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	210f      	movs	r1, #15
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f7ff ff90 	bl	80016d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <SysTick_Config+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <SysTick_Config+0x40>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff2d 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017fc:	f7ff ff42 	bl	8001684 <__NVIC_GetPriorityGrouping>
 8001800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff ff90 	bl	800172c <NVIC_EncodePriority>
 800180c:	4602      	mov	r2, r0
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff5f 	bl	80016d8 <__NVIC_SetPriority>
}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff35 	bl	80016a0 <__NVIC_EnableIRQ>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ffa2 	bl	8001790 <SysTick_Config>
 800184c:	4603      	mov	r3, r0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001858:	b480      	push	{r7}
 800185a:	b08b      	sub	sp, #44	; 0x2c
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001866:	2300      	movs	r3, #0
 8001868:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186a:	e148      	b.n	8001afe <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800186c:	2201      	movs	r2, #1
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	69fa      	ldr	r2, [r7, #28]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	429a      	cmp	r2, r3
 8001886:	f040 8137 	bne.w	8001af8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4aa3      	ldr	r2, [pc, #652]	; (8001b1c <HAL_GPIO_Init+0x2c4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d05e      	beq.n	8001952 <HAL_GPIO_Init+0xfa>
 8001894:	4aa1      	ldr	r2, [pc, #644]	; (8001b1c <HAL_GPIO_Init+0x2c4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d875      	bhi.n	8001986 <HAL_GPIO_Init+0x12e>
 800189a:	4aa1      	ldr	r2, [pc, #644]	; (8001b20 <HAL_GPIO_Init+0x2c8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d058      	beq.n	8001952 <HAL_GPIO_Init+0xfa>
 80018a0:	4a9f      	ldr	r2, [pc, #636]	; (8001b20 <HAL_GPIO_Init+0x2c8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d86f      	bhi.n	8001986 <HAL_GPIO_Init+0x12e>
 80018a6:	4a9f      	ldr	r2, [pc, #636]	; (8001b24 <HAL_GPIO_Init+0x2cc>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d052      	beq.n	8001952 <HAL_GPIO_Init+0xfa>
 80018ac:	4a9d      	ldr	r2, [pc, #628]	; (8001b24 <HAL_GPIO_Init+0x2cc>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d869      	bhi.n	8001986 <HAL_GPIO_Init+0x12e>
 80018b2:	4a9d      	ldr	r2, [pc, #628]	; (8001b28 <HAL_GPIO_Init+0x2d0>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d04c      	beq.n	8001952 <HAL_GPIO_Init+0xfa>
 80018b8:	4a9b      	ldr	r2, [pc, #620]	; (8001b28 <HAL_GPIO_Init+0x2d0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d863      	bhi.n	8001986 <HAL_GPIO_Init+0x12e>
 80018be:	4a9b      	ldr	r2, [pc, #620]	; (8001b2c <HAL_GPIO_Init+0x2d4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d046      	beq.n	8001952 <HAL_GPIO_Init+0xfa>
 80018c4:	4a99      	ldr	r2, [pc, #612]	; (8001b2c <HAL_GPIO_Init+0x2d4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d85d      	bhi.n	8001986 <HAL_GPIO_Init+0x12e>
 80018ca:	2b12      	cmp	r3, #18
 80018cc:	d82a      	bhi.n	8001924 <HAL_GPIO_Init+0xcc>
 80018ce:	2b12      	cmp	r3, #18
 80018d0:	d859      	bhi.n	8001986 <HAL_GPIO_Init+0x12e>
 80018d2:	a201      	add	r2, pc, #4	; (adr r2, 80018d8 <HAL_GPIO_Init+0x80>)
 80018d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d8:	08001953 	.word	0x08001953
 80018dc:	0800192d 	.word	0x0800192d
 80018e0:	0800193f 	.word	0x0800193f
 80018e4:	08001981 	.word	0x08001981
 80018e8:	08001987 	.word	0x08001987
 80018ec:	08001987 	.word	0x08001987
 80018f0:	08001987 	.word	0x08001987
 80018f4:	08001987 	.word	0x08001987
 80018f8:	08001987 	.word	0x08001987
 80018fc:	08001987 	.word	0x08001987
 8001900:	08001987 	.word	0x08001987
 8001904:	08001987 	.word	0x08001987
 8001908:	08001987 	.word	0x08001987
 800190c:	08001987 	.word	0x08001987
 8001910:	08001987 	.word	0x08001987
 8001914:	08001987 	.word	0x08001987
 8001918:	08001987 	.word	0x08001987
 800191c:	08001935 	.word	0x08001935
 8001920:	08001949 	.word	0x08001949
 8001924:	4a82      	ldr	r2, [pc, #520]	; (8001b30 <HAL_GPIO_Init+0x2d8>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d013      	beq.n	8001952 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800192a:	e02c      	b.n	8001986 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	623b      	str	r3, [r7, #32]
          break;
 8001932:	e029      	b.n	8001988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	3304      	adds	r3, #4
 800193a:	623b      	str	r3, [r7, #32]
          break;
 800193c:	e024      	b.n	8001988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	3308      	adds	r3, #8
 8001944:	623b      	str	r3, [r7, #32]
          break;
 8001946:	e01f      	b.n	8001988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	330c      	adds	r3, #12
 800194e:	623b      	str	r3, [r7, #32]
          break;
 8001950:	e01a      	b.n	8001988 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800195a:	2304      	movs	r3, #4
 800195c:	623b      	str	r3, [r7, #32]
          break;
 800195e:	e013      	b.n	8001988 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001968:	2308      	movs	r3, #8
 800196a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	611a      	str	r2, [r3, #16]
          break;
 8001972:	e009      	b.n	8001988 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001974:	2308      	movs	r3, #8
 8001976:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	615a      	str	r2, [r3, #20]
          break;
 800197e:	e003      	b.n	8001988 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001980:	2300      	movs	r3, #0
 8001982:	623b      	str	r3, [r7, #32]
          break;
 8001984:	e000      	b.n	8001988 <HAL_GPIO_Init+0x130>
          break;
 8001986:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2bff      	cmp	r3, #255	; 0xff
 800198c:	d801      	bhi.n	8001992 <HAL_GPIO_Init+0x13a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	e001      	b.n	8001996 <HAL_GPIO_Init+0x13e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3304      	adds	r3, #4
 8001996:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2bff      	cmp	r3, #255	; 0xff
 800199c:	d802      	bhi.n	80019a4 <HAL_GPIO_Init+0x14c>
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	e002      	b.n	80019aa <HAL_GPIO_Init+0x152>
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	3b08      	subs	r3, #8
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	210f      	movs	r1, #15
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	401a      	ands	r2, r3
 80019bc:	6a39      	ldr	r1, [r7, #32]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	431a      	orrs	r2, r3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 8090 	beq.w	8001af8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019d8:	4b56      	ldr	r3, [pc, #344]	; (8001b34 <HAL_GPIO_Init+0x2dc>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a55      	ldr	r2, [pc, #340]	; (8001b34 <HAL_GPIO_Init+0x2dc>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <HAL_GPIO_Init+0x2dc>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019f0:	4a51      	ldr	r2, [pc, #324]	; (8001b38 <HAL_GPIO_Init+0x2e0>)
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	089b      	lsrs	r3, r3, #2
 80019f6:	3302      	adds	r3, #2
 80019f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	220f      	movs	r2, #15
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	4013      	ands	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a49      	ldr	r2, [pc, #292]	; (8001b3c <HAL_GPIO_Init+0x2e4>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d00d      	beq.n	8001a38 <HAL_GPIO_Init+0x1e0>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a48      	ldr	r2, [pc, #288]	; (8001b40 <HAL_GPIO_Init+0x2e8>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d007      	beq.n	8001a34 <HAL_GPIO_Init+0x1dc>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a47      	ldr	r2, [pc, #284]	; (8001b44 <HAL_GPIO_Init+0x2ec>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d101      	bne.n	8001a30 <HAL_GPIO_Init+0x1d8>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e004      	b.n	8001a3a <HAL_GPIO_Init+0x1e2>
 8001a30:	2303      	movs	r3, #3
 8001a32:	e002      	b.n	8001a3a <HAL_GPIO_Init+0x1e2>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <HAL_GPIO_Init+0x1e2>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3c:	f002 0203 	and.w	r2, r2, #3
 8001a40:	0092      	lsls	r2, r2, #2
 8001a42:	4093      	lsls	r3, r2
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a4a:	493b      	ldr	r1, [pc, #236]	; (8001b38 <HAL_GPIO_Init+0x2e0>)
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	3302      	adds	r3, #2
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d006      	beq.n	8001a72 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a64:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <HAL_GPIO_Init+0x2f0>)
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	4937      	ldr	r1, [pc, #220]	; (8001b48 <HAL_GPIO_Init+0x2f0>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	608b      	str	r3, [r1, #8]
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a72:	4b35      	ldr	r3, [pc, #212]	; (8001b48 <HAL_GPIO_Init+0x2f0>)
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	4933      	ldr	r1, [pc, #204]	; (8001b48 <HAL_GPIO_Init+0x2f0>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d006      	beq.n	8001a9a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a8c:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <HAL_GPIO_Init+0x2f0>)
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	492d      	ldr	r1, [pc, #180]	; (8001b48 <HAL_GPIO_Init+0x2f0>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	60cb      	str	r3, [r1, #12]
 8001a98:	e006      	b.n	8001aa8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a9a:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <HAL_GPIO_Init+0x2f0>)
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	4929      	ldr	r1, [pc, #164]	; (8001b48 <HAL_GPIO_Init+0x2f0>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d006      	beq.n	8001ac2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_GPIO_Init+0x2f0>)
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	4923      	ldr	r1, [pc, #140]	; (8001b48 <HAL_GPIO_Init+0x2f0>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ac2:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <HAL_GPIO_Init+0x2f0>)
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	491f      	ldr	r1, [pc, #124]	; (8001b48 <HAL_GPIO_Init+0x2f0>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001adc:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <HAL_GPIO_Init+0x2f0>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4919      	ldr	r1, [pc, #100]	; (8001b48 <HAL_GPIO_Init+0x2f0>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	600b      	str	r3, [r1, #0]
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001aea:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <HAL_GPIO_Init+0x2f0>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	4915      	ldr	r1, [pc, #84]	; (8001b48 <HAL_GPIO_Init+0x2f0>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	3301      	adds	r3, #1
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	fa22 f303 	lsr.w	r3, r2, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f47f aeaf 	bne.w	800186c <HAL_GPIO_Init+0x14>
  }
}
 8001b0e:	bf00      	nop
 8001b10:	bf00      	nop
 8001b12:	372c      	adds	r7, #44	; 0x2c
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	10320000 	.word	0x10320000
 8001b20:	10310000 	.word	0x10310000
 8001b24:	10220000 	.word	0x10220000
 8001b28:	10210000 	.word	0x10210000
 8001b2c:	10120000 	.word	0x10120000
 8001b30:	10110000 	.word	0x10110000
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40010000 	.word	0x40010000
 8001b3c:	40010800 	.word	0x40010800
 8001b40:	40010c00 	.word	0x40010c00
 8001b44:	40011000 	.word	0x40011000
 8001b48:	40010400 	.word	0x40010400

08001b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
 8001b68:	e001      	b.n	8001b6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	460b      	mov	r3, r1
 8001b84:	807b      	strh	r3, [r7, #2]
 8001b86:	4613      	mov	r3, r2
 8001b88:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b8a:	787b      	ldrb	r3, [r7, #1]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b90:	887a      	ldrh	r2, [r7, #2]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b96:	e003      	b.n	8001ba0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b98:	887b      	ldrh	r3, [r7, #2]
 8001b9a:	041a      	lsls	r2, r3, #16
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	611a      	str	r2, [r3, #16]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b085      	sub	sp, #20
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bbc:	887a      	ldrh	r2, [r7, #2]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	041a      	lsls	r2, r3, #16
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	43d9      	mvns	r1, r3
 8001bc8:	887b      	ldrh	r3, [r7, #2]
 8001bca:	400b      	ands	r3, r1
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	611a      	str	r2, [r3, #16]
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e26c      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 8087 	beq.w	8001d0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bfc:	4b92      	ldr	r3, [pc, #584]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d00c      	beq.n	8001c22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c08:	4b8f      	ldr	r3, [pc, #572]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d112      	bne.n	8001c3a <HAL_RCC_OscConfig+0x5e>
 8001c14:	4b8c      	ldr	r3, [pc, #560]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c20:	d10b      	bne.n	8001c3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c22:	4b89      	ldr	r3, [pc, #548]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d06c      	beq.n	8001d08 <HAL_RCC_OscConfig+0x12c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d168      	bne.n	8001d08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e246      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c42:	d106      	bne.n	8001c52 <HAL_RCC_OscConfig+0x76>
 8001c44:	4b80      	ldr	r3, [pc, #512]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a7f      	ldr	r2, [pc, #508]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	e02e      	b.n	8001cb0 <HAL_RCC_OscConfig+0xd4>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x98>
 8001c5a:	4b7b      	ldr	r3, [pc, #492]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a7a      	ldr	r2, [pc, #488]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	4b78      	ldr	r3, [pc, #480]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a77      	ldr	r2, [pc, #476]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e01d      	b.n	8001cb0 <HAL_RCC_OscConfig+0xd4>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0xbc>
 8001c7e:	4b72      	ldr	r3, [pc, #456]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a71      	ldr	r2, [pc, #452]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	4b6f      	ldr	r3, [pc, #444]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a6e      	ldr	r2, [pc, #440]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e00b      	b.n	8001cb0 <HAL_RCC_OscConfig+0xd4>
 8001c98:	4b6b      	ldr	r3, [pc, #428]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a6a      	ldr	r2, [pc, #424]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	4b68      	ldr	r3, [pc, #416]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a67      	ldr	r2, [pc, #412]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d013      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fcb6 	bl	8001628 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff fcb2 	bl	8001628 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	; 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e1fa      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd2:	4b5d      	ldr	r3, [pc, #372]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0xe4>
 8001cde:	e014      	b.n	8001d0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fca2 	bl	8001628 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fc9e 	bl	8001628 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e1e6      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfa:	4b53      	ldr	r3, [pc, #332]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x10c>
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d063      	beq.n	8001dde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d16:	4b4c      	ldr	r3, [pc, #304]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d22:	4b49      	ldr	r3, [pc, #292]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d11c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x18c>
 8001d2e:	4b46      	ldr	r3, [pc, #280]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d116      	bne.n	8001d68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3a:	4b43      	ldr	r3, [pc, #268]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <HAL_RCC_OscConfig+0x176>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d001      	beq.n	8001d52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e1ba      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d52:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4939      	ldr	r1, [pc, #228]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	e03a      	b.n	8001dde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d70:	4b36      	ldr	r3, [pc, #216]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d76:	f7ff fc57 	bl	8001628 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7e:	f7ff fc53 	bl	8001628 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e19b      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d90:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9c:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4927      	ldr	r1, [pc, #156]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	600b      	str	r3, [r1, #0]
 8001db0:	e015      	b.n	8001dde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db2:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fc36 	bl	8001628 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fc32 	bl	8001628 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e17a      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d03a      	beq.n	8001e60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d019      	beq.n	8001e26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df2:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df8:	f7ff fc16 	bl	8001628 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e00:	f7ff fc12 	bl	8001628 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e15a      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f000 fa9a 	bl	8002358 <RCC_Delay>
 8001e24:	e01c      	b.n	8001e60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2c:	f7ff fbfc 	bl	8001628 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e32:	e00f      	b.n	8001e54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e34:	f7ff fbf8 	bl	8001628 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d908      	bls.n	8001e54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e140      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	42420000 	.word	0x42420000
 8001e50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e54:	4b9e      	ldr	r3, [pc, #632]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1e9      	bne.n	8001e34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80a6 	beq.w	8001fba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e72:	4b97      	ldr	r3, [pc, #604]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10d      	bne.n	8001e9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	4b94      	ldr	r3, [pc, #592]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	4a93      	ldr	r2, [pc, #588]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e88:	61d3      	str	r3, [r2, #28]
 8001e8a:	4b91      	ldr	r3, [pc, #580]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e96:	2301      	movs	r3, #1
 8001e98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9a:	4b8e      	ldr	r3, [pc, #568]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d118      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ea6:	4b8b      	ldr	r3, [pc, #556]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a8a      	ldr	r2, [pc, #552]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb2:	f7ff fbb9 	bl	8001628 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eba:	f7ff fbb5 	bl	8001628 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b64      	cmp	r3, #100	; 0x64
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e0fd      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ecc:	4b81      	ldr	r3, [pc, #516]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d106      	bne.n	8001eee <HAL_RCC_OscConfig+0x312>
 8001ee0:	4b7b      	ldr	r3, [pc, #492]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4a7a      	ldr	r2, [pc, #488]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6213      	str	r3, [r2, #32]
 8001eec:	e02d      	b.n	8001f4a <HAL_RCC_OscConfig+0x36e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x334>
 8001ef6:	4b76      	ldr	r3, [pc, #472]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4a75      	ldr	r2, [pc, #468]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	f023 0301 	bic.w	r3, r3, #1
 8001f00:	6213      	str	r3, [r2, #32]
 8001f02:	4b73      	ldr	r3, [pc, #460]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4a72      	ldr	r2, [pc, #456]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	f023 0304 	bic.w	r3, r3, #4
 8001f0c:	6213      	str	r3, [r2, #32]
 8001f0e:	e01c      	b.n	8001f4a <HAL_RCC_OscConfig+0x36e>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2b05      	cmp	r3, #5
 8001f16:	d10c      	bne.n	8001f32 <HAL_RCC_OscConfig+0x356>
 8001f18:	4b6d      	ldr	r3, [pc, #436]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	4a6c      	ldr	r2, [pc, #432]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	f043 0304 	orr.w	r3, r3, #4
 8001f22:	6213      	str	r3, [r2, #32]
 8001f24:	4b6a      	ldr	r3, [pc, #424]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4a69      	ldr	r2, [pc, #420]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6213      	str	r3, [r2, #32]
 8001f30:	e00b      	b.n	8001f4a <HAL_RCC_OscConfig+0x36e>
 8001f32:	4b67      	ldr	r3, [pc, #412]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	4a66      	ldr	r2, [pc, #408]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	f023 0301 	bic.w	r3, r3, #1
 8001f3c:	6213      	str	r3, [r2, #32]
 8001f3e:	4b64      	ldr	r3, [pc, #400]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	4a63      	ldr	r2, [pc, #396]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	f023 0304 	bic.w	r3, r3, #4
 8001f48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d015      	beq.n	8001f7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f52:	f7ff fb69 	bl	8001628 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f58:	e00a      	b.n	8001f70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5a:	f7ff fb65 	bl	8001628 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e0ab      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f70:	4b57      	ldr	r3, [pc, #348]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0ee      	beq.n	8001f5a <HAL_RCC_OscConfig+0x37e>
 8001f7c:	e014      	b.n	8001fa8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff fb53 	bl	8001628 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f86:	f7ff fb4f 	bl	8001628 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e095      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9c:	4b4c      	ldr	r3, [pc, #304]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1ee      	bne.n	8001f86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fa8:	7dfb      	ldrb	r3, [r7, #23]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d105      	bne.n	8001fba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fae:	4b48      	ldr	r3, [pc, #288]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	4a47      	ldr	r2, [pc, #284]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 8081 	beq.w	80020c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fc4:	4b42      	ldr	r3, [pc, #264]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 030c 	and.w	r3, r3, #12
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d061      	beq.n	8002094 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d146      	bne.n	8002066 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd8:	4b3f      	ldr	r3, [pc, #252]	; (80020d8 <HAL_RCC_OscConfig+0x4fc>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fde:	f7ff fb23 	bl	8001628 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7ff fb1f 	bl	8001628 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e067      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff8:	4b35      	ldr	r3, [pc, #212]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f0      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200c:	d108      	bne.n	8002020 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800200e:	4b30      	ldr	r3, [pc, #192]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	492d      	ldr	r1, [pc, #180]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002020:	4b2b      	ldr	r3, [pc, #172]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a19      	ldr	r1, [r3, #32]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	430b      	orrs	r3, r1
 8002032:	4927      	ldr	r1, [pc, #156]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002038:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <HAL_RCC_OscConfig+0x4fc>)
 800203a:	2201      	movs	r2, #1
 800203c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7ff faf3 	bl	8001628 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002046:	f7ff faef 	bl	8001628 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e037      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002058:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x46a>
 8002064:	e02f      	b.n	80020c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002066:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <HAL_RCC_OscConfig+0x4fc>)
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7ff fadc 	bl	8001628 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002074:	f7ff fad8 	bl	8001628 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e020      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x498>
 8002092:	e018      	b.n	80020c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e013      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d106      	bne.n	80020c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020be:	429a      	cmp	r2, r3
 80020c0:	d001      	beq.n	80020c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40007000 	.word	0x40007000
 80020d8:	42420060 	.word	0x42420060

080020dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0d0      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020f0:	4b6a      	ldr	r3, [pc, #424]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d910      	bls.n	8002120 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b67      	ldr	r3, [pc, #412]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 0207 	bic.w	r2, r3, #7
 8002106:	4965      	ldr	r1, [pc, #404]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210e:	4b63      	ldr	r3, [pc, #396]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0b8      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d020      	beq.n	800216e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002138:	4b59      	ldr	r3, [pc, #356]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	4a58      	ldr	r2, [pc, #352]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002142:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002150:	4b53      	ldr	r3, [pc, #332]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	4a52      	ldr	r2, [pc, #328]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800215a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800215c:	4b50      	ldr	r3, [pc, #320]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	494d      	ldr	r1, [pc, #308]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d040      	beq.n	80021fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d107      	bne.n	8002192 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	4b47      	ldr	r3, [pc, #284]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d115      	bne.n	80021ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e07f      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d107      	bne.n	80021aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219a:	4b41      	ldr	r3, [pc, #260]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d109      	bne.n	80021ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e073      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021aa:	4b3d      	ldr	r3, [pc, #244]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e06b      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ba:	4b39      	ldr	r3, [pc, #228]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f023 0203 	bic.w	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4936      	ldr	r1, [pc, #216]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021cc:	f7ff fa2c 	bl	8001628 <HAL_GetTick>
 80021d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d4:	f7ff fa28 	bl	8001628 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e053      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ea:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 020c 	and.w	r2, r3, #12
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d1eb      	bne.n	80021d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021fc:	4b27      	ldr	r3, [pc, #156]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d210      	bcs.n	800222c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b24      	ldr	r3, [pc, #144]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 0207 	bic.w	r2, r3, #7
 8002212:	4922      	ldr	r1, [pc, #136]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e032      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002238:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4916      	ldr	r1, [pc, #88]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	490e      	ldr	r1, [pc, #56]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	4313      	orrs	r3, r2
 8002268:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800226a:	f000 f821 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 800226e:	4602      	mov	r2, r0
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	490a      	ldr	r1, [pc, #40]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 800227c:	5ccb      	ldrb	r3, [r1, r3]
 800227e:	fa22 f303 	lsr.w	r3, r2, r3
 8002282:	4a09      	ldr	r2, [pc, #36]	; (80022a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <HAL_RCC_ClockConfig+0x1d0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f98a 	bl	80015a4 <HAL_InitTick>

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40022000 	.word	0x40022000
 80022a0:	40021000 	.word	0x40021000
 80022a4:	08002bbc 	.word	0x08002bbc
 80022a8:	20000080 	.word	0x20000080
 80022ac:	20000084 	.word	0x20000084

080022b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	2300      	movs	r3, #0
 80022c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022ca:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <HAL_RCC_GetSysClockFreq+0x94>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d002      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0x30>
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d003      	beq.n	80022e6 <HAL_RCC_GetSysClockFreq+0x36>
 80022de:	e027      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_RCC_GetSysClockFreq+0x98>)
 80022e2:	613b      	str	r3, [r7, #16]
      break;
 80022e4:	e027      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	0c9b      	lsrs	r3, r3, #18
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	4a17      	ldr	r2, [pc, #92]	; (800234c <HAL_RCC_GetSysClockFreq+0x9c>)
 80022f0:	5cd3      	ldrb	r3, [r2, r3]
 80022f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d010      	beq.n	8002320 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_RCC_GetSysClockFreq+0x94>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	0c5b      	lsrs	r3, r3, #17
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	4a11      	ldr	r2, [pc, #68]	; (8002350 <HAL_RCC_GetSysClockFreq+0xa0>)
 800230a:	5cd3      	ldrb	r3, [r2, r3]
 800230c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <HAL_RCC_GetSysClockFreq+0x98>)
 8002312:	fb02 f203 	mul.w	r2, r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	fbb2 f3f3 	udiv	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e004      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a0c      	ldr	r2, [pc, #48]	; (8002354 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002324:	fb02 f303 	mul.w	r3, r2, r3
 8002328:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	613b      	str	r3, [r7, #16]
      break;
 800232e:	e002      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_RCC_GetSysClockFreq+0x98>)
 8002332:	613b      	str	r3, [r7, #16]
      break;
 8002334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002336:	693b      	ldr	r3, [r7, #16]
}
 8002338:	4618      	mov	r0, r3
 800233a:	371c      	adds	r7, #28
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000
 8002348:	007a1200 	.word	0x007a1200
 800234c:	08002bcc 	.word	0x08002bcc
 8002350:	08002bdc 	.word	0x08002bdc
 8002354:	003d0900 	.word	0x003d0900

08002358 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <RCC_Delay+0x34>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <RCC_Delay+0x38>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	0a5b      	lsrs	r3, r3, #9
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002374:	bf00      	nop
  }
  while (Delay --);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1e5a      	subs	r2, r3, #1
 800237a:	60fa      	str	r2, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f9      	bne.n	8002374 <RCC_Delay+0x1c>
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr
 800238c:	20000080 	.word	0x20000080
 8002390:	10624dd3 	.word	0x10624dd3

08002394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e041      	b.n	800242a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe ff4c 	bl	8001258 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3304      	adds	r3, #4
 80023d0:	4619      	mov	r1, r3
 80023d2:	4610      	mov	r0, r2
 80023d4:	f000 fa56 	bl	8002884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b01      	cmp	r3, #1
 8002446:	d001      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e035      	b.n	80024b8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a16      	ldr	r2, [pc, #88]	; (80024c4 <HAL_TIM_Base_Start_IT+0x90>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d009      	beq.n	8002482 <HAL_TIM_Base_Start_IT+0x4e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002476:	d004      	beq.n	8002482 <HAL_TIM_Base_Start_IT+0x4e>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <HAL_TIM_Base_Start_IT+0x94>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d111      	bne.n	80024a6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b06      	cmp	r3, #6
 8002492:	d010      	beq.n	80024b6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024a4:	e007      	b.n	80024b6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0201 	orr.w	r2, r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40012c00 	.word	0x40012c00
 80024c8:	40000400 	.word	0x40000400

080024cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d020      	beq.n	8002530 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d01b      	beq.n	8002530 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0202 	mvn.w	r2, #2
 8002500:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f998 	bl	800284c <HAL_TIM_IC_CaptureCallback>
 800251c:	e005      	b.n	800252a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f98b 	bl	800283a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f99a 	bl	800285e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	d020      	beq.n	800257c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d01b      	beq.n	800257c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0204 	mvn.w	r2, #4
 800254c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2202      	movs	r2, #2
 8002552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f972 	bl	800284c <HAL_TIM_IC_CaptureCallback>
 8002568:	e005      	b.n	8002576 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f965 	bl	800283a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f974 	bl	800285e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b00      	cmp	r3, #0
 8002584:	d020      	beq.n	80025c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d01b      	beq.n	80025c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0208 	mvn.w	r2, #8
 8002598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2204      	movs	r2, #4
 800259e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f94c 	bl	800284c <HAL_TIM_IC_CaptureCallback>
 80025b4:	e005      	b.n	80025c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f93f 	bl	800283a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f94e 	bl	800285e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d020      	beq.n	8002614 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01b      	beq.n	8002614 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0210 	mvn.w	r2, #16
 80025e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2208      	movs	r2, #8
 80025ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f926 	bl	800284c <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f919 	bl	800283a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f928 	bl	800285e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00c      	beq.n	8002638 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	d007      	beq.n	8002638 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0201 	mvn.w	r2, #1
 8002630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7fe fd7c 	bl	8001130 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00c      	beq.n	800265c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002648:	2b00      	cmp	r3, #0
 800264a:	d007      	beq.n	800265c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fa6f 	bl	8002b3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00c      	beq.n	8002680 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f8f8 	bl	8002870 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00c      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f003 0320 	and.w	r3, r3, #32
 8002690:	2b00      	cmp	r3, #0
 8002692:	d007      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0220 	mvn.w	r2, #32
 800269c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 fa42 	bl	8002b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_TIM_ConfigClockSource+0x1c>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e0b4      	b.n	8002832 <HAL_TIM_ConfigClockSource+0x186>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2202      	movs	r2, #2
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002700:	d03e      	beq.n	8002780 <HAL_TIM_ConfigClockSource+0xd4>
 8002702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002706:	f200 8087 	bhi.w	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 800270a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270e:	f000 8086 	beq.w	800281e <HAL_TIM_ConfigClockSource+0x172>
 8002712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002716:	d87f      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002718:	2b70      	cmp	r3, #112	; 0x70
 800271a:	d01a      	beq.n	8002752 <HAL_TIM_ConfigClockSource+0xa6>
 800271c:	2b70      	cmp	r3, #112	; 0x70
 800271e:	d87b      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002720:	2b60      	cmp	r3, #96	; 0x60
 8002722:	d050      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0x11a>
 8002724:	2b60      	cmp	r3, #96	; 0x60
 8002726:	d877      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002728:	2b50      	cmp	r3, #80	; 0x50
 800272a:	d03c      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0xfa>
 800272c:	2b50      	cmp	r3, #80	; 0x50
 800272e:	d873      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002730:	2b40      	cmp	r3, #64	; 0x40
 8002732:	d058      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0x13a>
 8002734:	2b40      	cmp	r3, #64	; 0x40
 8002736:	d86f      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002738:	2b30      	cmp	r3, #48	; 0x30
 800273a:	d064      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x15a>
 800273c:	2b30      	cmp	r3, #48	; 0x30
 800273e:	d86b      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002740:	2b20      	cmp	r3, #32
 8002742:	d060      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x15a>
 8002744:	2b20      	cmp	r3, #32
 8002746:	d867      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
 8002748:	2b00      	cmp	r3, #0
 800274a:	d05c      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x15a>
 800274c:	2b10      	cmp	r3, #16
 800274e:	d05a      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x15a>
 8002750:	e062      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6899      	ldr	r1, [r3, #8]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f000 f96a 	bl	8002a3a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002774:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	609a      	str	r2, [r3, #8]
      break;
 800277e:	e04f      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6899      	ldr	r1, [r3, #8]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f000 f953 	bl	8002a3a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027a2:	609a      	str	r2, [r3, #8]
      break;
 80027a4:	e03c      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	6859      	ldr	r1, [r3, #4]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	461a      	mov	r2, r3
 80027b4:	f000 f8ca 	bl	800294c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2150      	movs	r1, #80	; 0x50
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f921 	bl	8002a06 <TIM_ITRx_SetConfig>
      break;
 80027c4:	e02c      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6859      	ldr	r1, [r3, #4]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	461a      	mov	r2, r3
 80027d4:	f000 f8e8 	bl	80029a8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2160      	movs	r1, #96	; 0x60
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 f911 	bl	8002a06 <TIM_ITRx_SetConfig>
      break;
 80027e4:	e01c      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6859      	ldr	r1, [r3, #4]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f000 f8aa 	bl	800294c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2140      	movs	r1, #64	; 0x40
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f901 	bl	8002a06 <TIM_ITRx_SetConfig>
      break;
 8002804:	e00c      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4619      	mov	r1, r3
 8002810:	4610      	mov	r0, r2
 8002812:	f000 f8f8 	bl	8002a06 <TIM_ITRx_SetConfig>
      break;
 8002816:	e003      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
      break;
 800281c:	e000      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800281e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002830:	7bfb      	ldrb	r3, [r7, #15]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr

0800285e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
	...

08002884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a2b      	ldr	r2, [pc, #172]	; (8002944 <TIM_Base_SetConfig+0xc0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d007      	beq.n	80028ac <TIM_Base_SetConfig+0x28>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a2:	d003      	beq.n	80028ac <TIM_Base_SetConfig+0x28>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a28      	ldr	r2, [pc, #160]	; (8002948 <TIM_Base_SetConfig+0xc4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d108      	bne.n	80028be <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a20      	ldr	r2, [pc, #128]	; (8002944 <TIM_Base_SetConfig+0xc0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d007      	beq.n	80028d6 <TIM_Base_SetConfig+0x52>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028cc:	d003      	beq.n	80028d6 <TIM_Base_SetConfig+0x52>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a1d      	ldr	r2, [pc, #116]	; (8002948 <TIM_Base_SetConfig+0xc4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d108      	bne.n	80028e8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a0d      	ldr	r2, [pc, #52]	; (8002944 <TIM_Base_SetConfig+0xc0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d103      	bne.n	800291c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f023 0201 	bic.w	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	611a      	str	r2, [r3, #16]
  }
}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	40012c00 	.word	0x40012c00
 8002948:	40000400 	.word	0x40000400

0800294c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	f023 0201 	bic.w	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f023 030a 	bic.w	r3, r3, #10
 8002988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4313      	orrs	r3, r2
 8002990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	621a      	str	r2, [r3, #32]
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	f023 0210 	bic.w	r2, r3, #16
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	031b      	lsls	r3, r3, #12
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	621a      	str	r2, [r3, #32]
}
 80029fc:	bf00      	nop
 80029fe:	371c      	adds	r7, #28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f043 0307 	orr.w	r3, r3, #7
 8002a28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	609a      	str	r2, [r3, #8]
}
 8002a30:	bf00      	nop
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b087      	sub	sp, #28
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	021a      	lsls	r2, r3, #8
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	609a      	str	r2, [r3, #8]
}
 8002a6e:	bf00      	nop
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e041      	b.n	8002b14 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d009      	beq.n	8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002adc:	d004      	beq.n	8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a10      	ldr	r2, [pc, #64]	; (8002b24 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d10c      	bne.n	8002b02 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40012c00 	.word	0x40012c00
 8002b24:	40000400 	.word	0x40000400

08002b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <__libc_init_array>:
 8002b4c:	b570      	push	{r4, r5, r6, lr}
 8002b4e:	2600      	movs	r6, #0
 8002b50:	4d0c      	ldr	r5, [pc, #48]	; (8002b84 <__libc_init_array+0x38>)
 8002b52:	4c0d      	ldr	r4, [pc, #52]	; (8002b88 <__libc_init_array+0x3c>)
 8002b54:	1b64      	subs	r4, r4, r5
 8002b56:	10a4      	asrs	r4, r4, #2
 8002b58:	42a6      	cmp	r6, r4
 8002b5a:	d109      	bne.n	8002b70 <__libc_init_array+0x24>
 8002b5c:	f000 f822 	bl	8002ba4 <_init>
 8002b60:	2600      	movs	r6, #0
 8002b62:	4d0a      	ldr	r5, [pc, #40]	; (8002b8c <__libc_init_array+0x40>)
 8002b64:	4c0a      	ldr	r4, [pc, #40]	; (8002b90 <__libc_init_array+0x44>)
 8002b66:	1b64      	subs	r4, r4, r5
 8002b68:	10a4      	asrs	r4, r4, #2
 8002b6a:	42a6      	cmp	r6, r4
 8002b6c:	d105      	bne.n	8002b7a <__libc_init_array+0x2e>
 8002b6e:	bd70      	pop	{r4, r5, r6, pc}
 8002b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b74:	4798      	blx	r3
 8002b76:	3601      	adds	r6, #1
 8002b78:	e7ee      	b.n	8002b58 <__libc_init_array+0xc>
 8002b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b7e:	4798      	blx	r3
 8002b80:	3601      	adds	r6, #1
 8002b82:	e7f2      	b.n	8002b6a <__libc_init_array+0x1e>
 8002b84:	08002be0 	.word	0x08002be0
 8002b88:	08002be0 	.word	0x08002be0
 8002b8c:	08002be0 	.word	0x08002be0
 8002b90:	08002be4 	.word	0x08002be4

08002b94 <memset>:
 8002b94:	4603      	mov	r3, r0
 8002b96:	4402      	add	r2, r0
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d100      	bne.n	8002b9e <memset+0xa>
 8002b9c:	4770      	bx	lr
 8002b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002ba2:	e7f9      	b.n	8002b98 <memset+0x4>

08002ba4 <_init>:
 8002ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba6:	bf00      	nop
 8002ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002baa:	bc08      	pop	{r3}
 8002bac:	469e      	mov	lr, r3
 8002bae:	4770      	bx	lr

08002bb0 <_fini>:
 8002bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb2:	bf00      	nop
 8002bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb6:	bc08      	pop	{r3}
 8002bb8:	469e      	mov	lr, r3
 8002bba:	4770      	bx	lr
